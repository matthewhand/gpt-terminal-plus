openapi: 3.0.3
info:
  title: gpt-terminal-plus API
  version: 0.1.0
  description: Minimal OpenAPI surface for listing servers and executing shell/python/LLM
servers:
  - url: http://localhost:3100
    description: Local dev
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: API_TOKEN
  schemas:
    ExecutionResult:
      type: object
      required: [stdout, stderr, exitCode, error]
      properties:
        stdout: { type: string }
        stderr: { type: string }
        exitCode: { type: integer }
        error: { type: boolean }
security:
  - bearerAuth: []
paths:
  /server/list:
    get:
      summary: List servers for this API token
      responses:
        '200':
          description: List of servers
          content:
            application/json:
              schema:
                type: object
                required: [servers]
                properties:
                  servers:
                    type: array
                    items:
                      type: object
                      required: [key, label, protocol]
                      properties:
                        key: { type: string }
                        label: { type: string }
                        protocol: { type: string }
                        hostname:
                          type: string
                          nullable: true
  /command/execute:
    post:
      summary: Execute a shell command
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [command]
              properties:
                command: { type: string }
                timeoutMs: { type: integer }
                directory: { type: string }
      responses:
        '200':
          description: Execution complete
          content:
            application/json:
              schema:
                type: object
                required: [result]
                properties:
                  result:
                    $ref: '#/components/schemas/ExecutionResult'
                  aiAnalysis: { type: object }
  /command/execute-code:
    post:
      summary: Execute code (e.g., python, bash)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [language, code]
              properties:
                language:
                  type: string
                  enum: [bash, python, python3]
                code: { type: string }
                timeoutMs: { type: integer }
                directory: { type: string }
      responses:
        '200':
          description: Execution complete
          content:
            application/json:
              schema:
                type: object
                required: [result]
                properties:
                  result:
                    $ref: '#/components/schemas/ExecutionResult'
                  aiAnalysis: { type: object }
  /command/execute-file:
    post:
      summary: Execute a file present on the server/target
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [filename]
              properties:
                filename: { type: string }
                directory: { type: string }
                timeoutMs: { type: integer }
      responses:
        '200':
          description: Execution complete
          content:
            application/json:
              schema:
                type: object
                required: [result]
                properties:
                  result:
                    $ref: '#/components/schemas/ExecutionResult'
                  aiAnalysis: { type: object }
  /command/execute-llm:
    post:
      summary: Run an LLM plan or direct instruction
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [instructions]
              properties:
                instructions: { type: string }
                dryRun: { type: boolean }
                stream: { type: boolean }
      responses:
        '200':
          description: Plan execution (or dry run) response
          content:
            application/json:
              schema:
                type: object
