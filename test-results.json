{"numFailedTestSuites":26,"numFailedTests":18,"numPassedTestSuites":47,"numPassedTests":270,"numPendingTestSuites":0,"numPendingTests":0,"numRuntimeErrorTestSuites":24,"numTodoTests":0,"numTotalTestSuites":73,"numTotalTests":288,"openHandles":[],"snapshot":{"added":0,"didUpdate":false,"failure":false,"filesAdded":0,"filesRemoved":0,"filesRemovedList":[],"filesUnmatched":0,"filesUpdated":0,"matched":0,"total":0,"unchecked":0,"uncheckedKeysByFile":[],"unmatched":0,"updated":0},"startTime":1755557552279,"success":false,"testResults":[{"assertionResults":[{"ancestorTitles":["createFile Action","input validation"],"duration":20,"failureDetails":[],"failureMessages":[],"fullName":"createFile Action input validation should throw error for missing file path","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should throw error for missing file path"},{"ancestorTitles":["createFile Action","input validation"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"createFile Action input validation should throw error for null file path","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should throw error for null file path"},{"ancestorTitles":["createFile Action","input validation"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"createFile Action input validation should throw error for non-string file path","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should throw error for non-string file path"},{"ancestorTitles":["createFile Action","input validation"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"createFile Action input validation should throw error for missing content","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should throw error for missing content"},{"ancestorTitles":["createFile Action","input validation"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"createFile Action input validation should throw error for null content","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should throw error for null content"},{"ancestorTitles":["createFile Action","input validation"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"createFile Action input validation should throw error for non-string content","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should throw error for non-string content"},{"ancestorTitles":["createFile Action","file path resolution"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"createFile Action file path resolution should use absolute path as-is","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should use absolute path as-is"},{"ancestorTitles":["createFile Action","file path resolution"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"createFile Action file path resolution should resolve relative path using getPresentWorkingDirectory","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should resolve relative path using getPresentWorkingDirectory"},{"ancestorTitles":["createFile Action","file path resolution"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"createFile Action file path resolution should resolve relative path using NODE_CONFIG_DIR when set","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should resolve relative path using NODE_CONFIG_DIR when set"},{"ancestorTitles":["createFile Action","file path resolution"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"createFile Action file path resolution should handle complex relative paths","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle complex relative paths"},{"ancestorTitles":["createFile Action","file path resolution"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"createFile Action file path resolution should handle current directory reference","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle current directory reference"},{"ancestorTitles":["createFile Action","backup functionality"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"createFile Action backup functionality should create backup when file exists and backup is true","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should create backup when file exists and backup is true"},{"ancestorTitles":["createFile Action","backup functionality"],"duration":2,"failureDetails":[{"matcherResult":{"message":"expect(jest.fn()).toHaveBeenCalledWith(...expected)\n\nExpected: \"/test/file.txt\"\n\nNumber of calls: 0","pass":false}}],"failureMessages":["Error: expect(jest.fn()).toHaveBeenCalledWith(...expected)\n\nExpected: \"/test/file.txt\"\n\nNumber of calls: 0\n    at /home/chatgpt/gpt-terminal-plus/tests/handlers/local/actions/createFile.comprehensive.test.ts:159:33\n    at Generator.next (<anonymous>)\n    at fulfilled (/home/chatgpt/gpt-terminal-plus/tests/handlers/local/actions/createFile.comprehensive.test.ts:28:58)"],"fullName":"createFile Action backup functionality should not create backup when file exists and backup is false","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should not create backup when file exists and backup is false"},{"ancestorTitles":["createFile Action","backup functionality"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"createFile Action backup functionality should not create backup when file does not exist","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should not create backup when file does not exist"},{"ancestorTitles":["createFile Action","backup functionality"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"createFile Action backup functionality should use default backup value (true) when not specified","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should use default backup value (true) when not specified"},{"ancestorTitles":["createFile Action","backup functionality"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"createFile Action backup functionality should handle backup creation errors","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should handle backup creation errors"},{"ancestorTitles":["createFile Action","file writing"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"createFile Action file writing should write file successfully","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should write file successfully"},{"ancestorTitles":["createFile Action","file writing"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"createFile Action file writing should handle different content types","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should handle different content types"},{"ancestorTitles":["createFile Action","file writing"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"createFile Action file writing should handle empty string content (after validation)","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle empty string content (after validation)"},{"ancestorTitles":["createFile Action","file writing"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"createFile Action file writing should handle write errors with Error objects","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle write errors with Error objects"},{"ancestorTitles":["createFile Action","file writing"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"createFile Action file writing should handle write errors with non-Error objects","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle write errors with non-Error objects"},{"ancestorTitles":["createFile Action","file writing"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"createFile Action file writing should handle write errors with complex objects","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle write errors with complex objects"},{"ancestorTitles":["createFile Action","integration scenarios"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"createFile Action integration scenarios should handle complete workflow with backup","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should handle complete workflow with backup"},{"ancestorTitles":["createFile Action","integration scenarios"],"duration":1,"failureDetails":[{"matcherResult":{"message":"expect(jest.fn()).toHaveBeenCalledWith(...expected)\n\nExpected: \"/var/log/app.log\"\n\nNumber of calls: 0","pass":false}}],"failureMessages":["Error: expect(jest.fn()).toHaveBeenCalledWith(...expected)\n\nExpected: \"/var/log/app.log\"\n\nNumber of calls: 0\n    at /home/chatgpt/gpt-terminal-plus/tests/handlers/local/actions/createFile.comprehensive.test.ts:293:33\n    at Generator.next (<anonymous>)\n    at fulfilled (/home/chatgpt/gpt-terminal-plus/tests/handlers/local/actions/createFile.comprehensive.test.ts:28:58)"],"fullName":"createFile Action integration scenarios should handle new file creation without backup","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should handle new file creation without backup"},{"ancestorTitles":["createFile Action","integration scenarios"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"createFile Action integration scenarios should handle different base directories","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle different base directories"},{"ancestorTitles":["createFile Action","integration scenarios"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"createFile Action integration scenarios should handle edge cases with path resolution","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should handle edge cases with path resolution"},{"ancestorTitles":["createFile Action","integration scenarios"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"createFile Action integration scenarios should handle concurrent file operations","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle concurrent file operations"},{"ancestorTitles":["createFile Action","integration scenarios"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"createFile Action integration scenarios should handle mixed success and failure scenarios","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle mixed success and failure scenarios"},{"ancestorTitles":["createFile Action","error handling edge cases"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"createFile Action error handling edge cases should handle existsSync throwing errors","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle existsSync throwing errors"},{"ancestorTitles":["createFile Action","error handling edge cases"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"createFile Action error handling edge cases should handle path resolution errors","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle path resolution errors"},{"ancestorTitles":["createFile Action","error handling edge cases"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"createFile Action error handling edge cases should handle very long file paths","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle very long file paths"},{"ancestorTitles":["createFile Action","error handling edge cases"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"createFile Action error handling edge cases should handle special characters in file paths","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle special characters in file paths"}],"endTime":1755557555235,"message":"  ● createFile Action › backup functionality › should not create backup when file exists and backup is false\n\n    expect(jest.fn()).toHaveBeenCalledWith(...expected)\n\n    Expected: \"/test/file.txt\"\n\n    Number of calls: 0\n\n      157 |       const result = await createFile('/test/file.txt', 'new content', false);\n      158 |\n    > 159 |       expect(mockFs.existsSync).toHaveBeenCalledWith('/test/file.txt');\n          |                                 ^\n      160 |       expect(mockFs.promises.copyFile).not.toHaveBeenCalled();\n      161 |       expect(mockFs.promises.writeFile).toHaveBeenCalledWith('/test/file.txt', 'new content');\n      162 |       expect(result).toBe(true);\n\n      at tests/handlers/local/actions/createFile.comprehensive.test.ts:159:33\n      at fulfilled (tests/handlers/local/actions/createFile.comprehensive.test.ts:28:58)\n\n  ● createFile Action › integration scenarios › should handle new file creation without backup\n\n    expect(jest.fn()).toHaveBeenCalledWith(...expected)\n\n    Expected: \"/var/log/app.log\"\n\n    Number of calls: 0\n\n      291 |       const result = await createFile('/var/log/app.log', 'Log entry', false);\n      292 |\n    > 293 |       expect(mockFs.existsSync).toHaveBeenCalledWith('/var/log/app.log');\n          |                                 ^\n      294 |       expect(mockFs.promises.copyFile).not.toHaveBeenCalled();\n      295 |       expect(mockFs.promises.writeFile).toHaveBeenCalledWith('/var/log/app.log', 'Log entry');\n      296 |       expect(result).toBe(true);\n\n      at tests/handlers/local/actions/createFile.comprehensive.test.ts:293:33\n      at fulfilled (tests/handlers/local/actions/createFile.comprehensive.test.ts:28:58)\n","name":"/home/chatgpt/gpt-terminal-plus/tests/handlers/local/actions/createFile.comprehensive.test.ts","startTime":1755557552364,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["Error Advisor","analyzeError","environment variable control"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"Error Advisor analyzeError environment variable control should return undefined when AUTO_ANALYZE_ERRORS is false","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return undefined when AUTO_ANALYZE_ERRORS is false"},{"ancestorTitles":["Error Advisor","analyzeError","environment variable control"],"duration":1,"failureDetails":[{"matcherResult":{"message":"expect(received).toBeDefined()\n\nReceived: undefined","pass":false}}],"failureMessages":["Error: expect(received).toBeDefined()\n\nReceived: undefined\n    at /home/chatgpt/gpt-terminal-plus/tests/llm/errorAdvisor.test.ts:67:24\n    at Generator.next (<anonymous>)\n    at fulfilled (/home/chatgpt/gpt-terminal-plus/tests/llm/errorAdvisor.test.ts:28:58)"],"fullName":"Error Advisor analyzeError environment variable control should analyze errors when AUTO_ANALYZE_ERRORS is not false","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should analyze errors when AUTO_ANALYZE_ERRORS is not false"},{"ancestorTitles":["Error Advisor","analyzeError","environment variable control"],"duration":0,"failureDetails":[{"matcherResult":{"message":"expect(received).toBeDefined()\n\nReceived: undefined","pass":false}}],"failureMessages":["Error: expect(received).toBeDefined()\n\nReceived: undefined\n    at /home/chatgpt/gpt-terminal-plus/tests/llm/errorAdvisor.test.ts:91:24\n    at Generator.next (<anonymous>)\n    at fulfilled (/home/chatgpt/gpt-terminal-plus/tests/llm/errorAdvisor.test.ts:28:58)"],"fullName":"Error Advisor analyzeError environment variable control should analyze errors by default when AUTO_ANALYZE_ERRORS is not set","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should analyze errors by default when AUTO_ANALYZE_ERRORS is not set"},{"ancestorTitles":["Error Advisor","analyzeError","model selection"],"duration":1,"failureDetails":[{"matcherResult":{"message":"expect(jest.fn()).toHaveBeenCalledWith(...expected)\n\nExpected: ObjectContaining {\"model\": \"gpt-oss:20b\"}\n\nNumber of calls: 0","pass":false}}],"failureMessages":["Error: expect(jest.fn()).toHaveBeenCalledWith(...expected)\n\nExpected: ObjectContaining {\"model\": \"gpt-oss:20b\"}\n\nNumber of calls: 0\n    at /home/chatgpt/gpt-terminal-plus/tests/llm/errorAdvisor.test.ts:121:26\n    at Generator.next (<anonymous>)\n    at fulfilled (/home/chatgpt/gpt-terminal-plus/tests/llm/errorAdvisor.test.ts:28:58)"],"fullName":"Error Advisor analyzeError model selection should prefer gpt-oss:20b when available","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should prefer gpt-oss:20b when available"},{"ancestorTitles":["Error Advisor","analyzeError","model selection"],"duration":1,"failureDetails":[{"matcherResult":{"message":"expect(jest.fn()).toHaveBeenCalledWith(...expected)\n\nExpected: ObjectContaining {\"model\": \"gpt-4\"}\n\nNumber of calls: 0","pass":false}}],"failureMessages":["Error: expect(jest.fn()).toHaveBeenCalledWith(...expected)\n\nExpected: ObjectContaining {\"model\": \"gpt-4\"}\n\nNumber of calls: 0\n    at /home/chatgpt/gpt-terminal-plus/tests/llm/errorAdvisor.test.ts:150:26\n    at Generator.next (<anonymous>)\n    at fulfilled (/home/chatgpt/gpt-terminal-plus/tests/llm/errorAdvisor.test.ts:28:58)"],"fullName":"Error Advisor analyzeError model selection should fall back to selected model when gpt-oss:20b is not available","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should fall back to selected model when gpt-oss:20b is not available"},{"ancestorTitles":["Error Advisor","analyzeError","context handling"],"duration":2,"failureDetails":[{"matcherResult":{"message":"expect(jest.fn()).toHaveBeenCalledWith(...expected)\n\nExpected: ObjectContaining {\"messages\": ArrayContaining [ObjectContaining {\"content\": StringContaining \"\\\"context\\\":\\\"command\\\"\", \"role\": \"user\"}]}\n\nNumber of calls: 0","pass":false}}],"failureMessages":["Error: expect(jest.fn()).toHaveBeenCalledWith(...expected)\n\nExpected: ObjectContaining {\"messages\": ArrayContaining [ObjectContaining {\"content\": StringContaining \"\\\"context\\\":\\\"command\\\"\", \"role\": \"user\"}]}\n\nNumber of calls: 0\n    at /home/chatgpt/gpt-terminal-plus/tests/llm/errorAdvisor.test.ts:182:26\n    at Generator.next (<anonymous>)\n    at fulfilled (/home/chatgpt/gpt-terminal-plus/tests/llm/errorAdvisor.test.ts:28:58)"],"fullName":"Error Advisor analyzeError context handling should handle command context","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should handle command context"},{"ancestorTitles":["Error Advisor","analyzeError","context handling"],"duration":1,"failureDetails":[{"matcherResult":{"message":"expect(jest.fn()).toHaveBeenCalledWith(...expected)\n\nExpected: ObjectContaining {\"messages\": ArrayContaining [ObjectContaining {\"content\": StringContaining \"\\\"language\\\":\\\"python\\\"\", \"role\": \"user\"}]}\n\nNumber of calls: 0","pass":false}}],"failureMessages":["Error: expect(jest.fn()).toHaveBeenCalledWith(...expected)\n\nExpected: ObjectContaining {\"messages\": ArrayContaining [ObjectContaining {\"content\": StringContaining \"\\\"language\\\":\\\"python\\\"\", \"role\": \"user\"}]}\n\nNumber of calls: 0\n    at /home/chatgpt/gpt-terminal-plus/tests/llm/errorAdvisor.test.ts:205:26\n    at Generator.next (<anonymous>)\n    at fulfilled (/home/chatgpt/gpt-terminal-plus/tests/llm/errorAdvisor.test.ts:28:58)"],"fullName":"Error Advisor analyzeError context handling should handle code context with language","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should handle code context with language"},{"ancestorTitles":["Error Advisor","analyzeError","context handling"],"duration":1,"failureDetails":[{"matcherResult":{"message":"expect(jest.fn()).toHaveBeenCalledWith(...expected)\n\nExpected: ObjectContaining {\"messages\": ArrayContaining [ObjectContaining {\"content\": StringContaining \"\\\"context\\\":\\\"file\\\"\", \"role\": \"user\"}]}\n\nNumber of calls: 0","pass":false}}],"failureMessages":["Error: expect(jest.fn()).toHaveBeenCalledWith(...expected)\n\nExpected: ObjectContaining {\"messages\": ArrayContaining [ObjectContaining {\"content\": StringContaining \"\\\"context\\\":\\\"file\\\"\", \"role\": \"user\"}]}\n\nNumber of calls: 0\n    at /home/chatgpt/gpt-terminal-plus/tests/llm/errorAdvisor.test.ts:227:26\n    at Generator.next (<anonymous>)\n    at fulfilled (/home/chatgpt/gpt-terminal-plus/tests/llm/errorAdvisor.test.ts:28:58)"],"fullName":"Error Advisor analyzeError context handling should handle file context","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should handle file context"},{"ancestorTitles":["Error Advisor","analyzeError","context handling"],"duration":1,"failureDetails":[{}],"failureMessages":["TypeError: Cannot read properties of undefined (reading '0')\n    at /home/chatgpt/gpt-terminal-plus/tests/llm/errorAdvisor.test.ts:251:48\n    at Generator.next (<anonymous>)\n    at fulfilled (/home/chatgpt/gpt-terminal-plus/tests/llm/errorAdvisor.test.ts:28:58)"],"fullName":"Error Advisor analyzeError context handling should include all context fields in the analysis request","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should include all context fields in the analysis request"},{"ancestorTitles":["Error Advisor","analyzeError","output truncation"],"duration":1,"failureDetails":[{}],"failureMessages":["TypeError: Cannot read properties of undefined (reading '0')\n    at /home/chatgpt/gpt-terminal-plus/tests/llm/errorAdvisor.test.ts:292:48\n    at Generator.next (<anonymous>)\n    at fulfilled (/home/chatgpt/gpt-terminal-plus/tests/llm/errorAdvisor.test.ts:28:58)"],"fullName":"Error Advisor analyzeError output truncation should truncate long stderr output","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should truncate long stderr output"},{"ancestorTitles":["Error Advisor","analyzeError","output truncation"],"duration":0,"failureDetails":[{}],"failureMessages":["TypeError: Cannot read properties of undefined (reading '0')\n    at /home/chatgpt/gpt-terminal-plus/tests/llm/errorAdvisor.test.ts:314:48\n    at Generator.next (<anonymous>)\n    at fulfilled (/home/chatgpt/gpt-terminal-plus/tests/llm/errorAdvisor.test.ts:28:58)"],"fullName":"Error Advisor analyzeError output truncation should truncate long stdout output","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should truncate long stdout output"},{"ancestorTitles":["Error Advisor","analyzeError","output truncation"],"duration":1,"failureDetails":[{}],"failureMessages":["TypeError: Cannot read properties of undefined (reading '0')\n    at /home/chatgpt/gpt-terminal-plus/tests/llm/errorAdvisor.test.ts:334:48\n    at Generator.next (<anonymous>)\n    at fulfilled (/home/chatgpt/gpt-terminal-plus/tests/llm/errorAdvisor.test.ts:28:58)"],"fullName":"Error Advisor analyzeError output truncation should not truncate short outputs","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should not truncate short outputs"},{"ancestorTitles":["Error Advisor","analyzeError","error handling"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Error Advisor analyzeError error handling should return undefined when chat throws an error","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return undefined when chat throws an error"},{"ancestorTitles":["Error Advisor","analyzeError","error handling"],"duration":1,"failureDetails":[{"matcherResult":{"expected":"","message":"expect(received).toBe(expected) // Object.is equality\n\nExpected: \"\"\nReceived: undefined","name":"toBe","pass":false}}],"failureMessages":["Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: \"\"\nReceived: undefined\n    at /home/chatgpt/gpt-terminal-plus/tests/llm/errorAdvisor.test.ts:378:30\n    at Generator.next (<anonymous>)\n    at fulfilled (/home/chatgpt/gpt-terminal-plus/tests/llm/errorAdvisor.test.ts:28:58)"],"fullName":"Error Advisor analyzeError error handling should handle empty response gracefully","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should handle empty response gracefully"},{"ancestorTitles":["Error Advisor","analyzeError","error handling"],"duration":1,"failureDetails":[{"matcherResult":{"expected":"","message":"expect(received).toBe(expected) // Object.is equality\n\nExpected: \"\"\nReceived: undefined","name":"toBe","pass":false}}],"failureMessages":["Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: \"\"\nReceived: undefined\n    at /home/chatgpt/gpt-terminal-plus/tests/llm/errorAdvisor.test.ts:396:30\n    at Generator.next (<anonymous>)\n    at fulfilled (/home/chatgpt/gpt-terminal-plus/tests/llm/errorAdvisor.test.ts:28:58)"],"fullName":"Error Advisor analyzeError error handling should handle missing message content","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should handle missing message content"},{"ancestorTitles":["Error Advisor","analyzeError","system prompt"],"duration":1,"failureDetails":[{}],"failureMessages":["TypeError: Cannot read properties of undefined (reading '0')\n    at /home/chatgpt/gpt-terminal-plus/tests/llm/errorAdvisor.test.ts:422:48\n    at Generator.next (<anonymous>)\n    at fulfilled (/home/chatgpt/gpt-terminal-plus/tests/llm/errorAdvisor.test.ts:28:58)"],"fullName":"Error Advisor analyzeError system prompt should include appropriate system prompt","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should include appropriate system prompt"},{"ancestorTitles":["Error Advisor","analyzeError","edge cases"],"duration":0,"failureDetails":[{"matcherResult":{"message":"expect(received).toBeDefined()\n\nReceived: undefined","pass":false}}],"failureMessages":["Error: expect(received).toBeDefined()\n\nReceived: undefined\n    at /home/chatgpt/gpt-terminal-plus/tests/llm/errorAdvisor.test.ts:453:24\n    at Generator.next (<anonymous>)\n    at fulfilled (/home/chatgpt/gpt-terminal-plus/tests/llm/errorAdvisor.test.ts:28:58)"],"fullName":"Error Advisor analyzeError edge cases should handle undefined stderr and stdout","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should handle undefined stderr and stdout"},{"ancestorTitles":["Error Advisor","analyzeError","edge cases"],"duration":0,"failureDetails":[{"matcherResult":{"message":"expect(received).toBeDefined()\n\nReceived: undefined","pass":false}}],"failureMessages":["Error: expect(received).toBeDefined()\n\nReceived: undefined\n    at /home/chatgpt/gpt-terminal-plus/tests/llm/errorAdvisor.test.ts:480:24\n    at Generator.next (<anonymous>)\n    at fulfilled (/home/chatgpt/gpt-terminal-plus/tests/llm/errorAdvisor.test.ts:28:58)"],"fullName":"Error Advisor analyzeError edge cases should handle missing exit code","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should handle missing exit code"}],"endTime":1755557555429,"message":"  ● Error Advisor › analyzeError › environment variable control › should analyze errors when AUTO_ANALYZE_ERRORS is not false\n\n    expect(received).toBeDefined()\n\n    Received: undefined\n\n      65 |\n      66 |         const result = await analyzeError(context);\n    > 67 |         expect(result).toBeDefined();\n         |                        ^\n      68 |         expect(result?.text).toBe('The file does not exist. Try checking the path.');\n      69 |         expect(mockChat).toHaveBeenCalled();\n      70 |       });\n\n      at tests/llm/errorAdvisor.test.ts:67:24\n      at fulfilled (tests/llm/errorAdvisor.test.ts:28:58)\n\n  ● Error Advisor › analyzeError › environment variable control › should analyze errors by default when AUTO_ANALYZE_ERRORS is not set\n\n    expect(received).toBeDefined()\n\n    Received: undefined\n\n      89 |\n      90 |         const result = await analyzeError(context);\n    > 91 |         expect(result).toBeDefined();\n         |                        ^\n      92 |         expect(mockChat).toHaveBeenCalled();\n      93 |       });\n      94 |     });\n\n      at tests/llm/errorAdvisor.test.ts:91:24\n      at fulfilled (tests/llm/errorAdvisor.test.ts:28:58)\n\n  ● Error Advisor › analyzeError › model selection › should prefer gpt-oss:20b when available\n\n    expect(jest.fn()).toHaveBeenCalledWith(...expected)\n\n    Expected: ObjectContaining {\"model\": \"gpt-oss:20b\"}\n\n    Number of calls: 0\n\n      119 |         const result = await analyzeError(context);\n      120 |         \n    > 121 |         expect(mockChat).toHaveBeenCalledWith(\n          |                          ^\n      122 |           expect.objectContaining({\n      123 |             model: 'gpt-oss:20b'\n      124 |           })\n\n      at tests/llm/errorAdvisor.test.ts:121:26\n      at fulfilled (tests/llm/errorAdvisor.test.ts:28:58)\n\n  ● Error Advisor › analyzeError › model selection › should fall back to selected model when gpt-oss:20b is not available\n\n    expect(jest.fn()).toHaveBeenCalledWith(...expected)\n\n    Expected: ObjectContaining {\"model\": \"gpt-4\"}\n\n    Number of calls: 0\n\n      148 |         const result = await analyzeError(context);\n      149 |         \n    > 150 |         expect(mockChat).toHaveBeenCalledWith(\n          |                          ^\n      151 |           expect.objectContaining({\n      152 |             model: 'gpt-4'\n      153 |           })\n\n      at tests/llm/errorAdvisor.test.ts:150:26\n      at fulfilled (tests/llm/errorAdvisor.test.ts:28:58)\n\n  ● Error Advisor › analyzeError › context handling › should handle command context\n\n    expect(jest.fn()).toHaveBeenCalledWith(...expected)\n\n    Expected: ObjectContaining {\"messages\": ArrayContaining [ObjectContaining {\"content\": StringContaining \"\\\"context\\\":\\\"command\\\"\", \"role\": \"user\"}]}\n\n    Number of calls: 0\n\n      180 |         await analyzeError(context);\n      181 |\n    > 182 |         expect(mockChat).toHaveBeenCalledWith(\n          |                          ^\n      183 |           expect.objectContaining({\n      184 |             messages: expect.arrayContaining([\n      185 |               expect.objectContaining({\n\n      at tests/llm/errorAdvisor.test.ts:182:26\n      at fulfilled (tests/llm/errorAdvisor.test.ts:28:58)\n\n  ● Error Advisor › analyzeError › context handling › should handle code context with language\n\n    expect(jest.fn()).toHaveBeenCalledWith(...expected)\n\n    Expected: ObjectContaining {\"messages\": ArrayContaining [ObjectContaining {\"content\": StringContaining \"\\\"language\\\":\\\"python\\\"\", \"role\": \"user\"}]}\n\n    Number of calls: 0\n\n      203 |         await analyzeError(context);\n      204 |\n    > 205 |         expect(mockChat).toHaveBeenCalledWith(\n          |                          ^\n      206 |           expect.objectContaining({\n      207 |             messages: expect.arrayContaining([\n      208 |               expect.objectContaining({\n\n      at tests/llm/errorAdvisor.test.ts:205:26\n      at fulfilled (tests/llm/errorAdvisor.test.ts:28:58)\n\n  ● Error Advisor › analyzeError › context handling › should handle file context\n\n    expect(jest.fn()).toHaveBeenCalledWith(...expected)\n\n    Expected: ObjectContaining {\"messages\": ArrayContaining [ObjectContaining {\"content\": StringContaining \"\\\"context\\\":\\\"file\\\"\", \"role\": \"user\"}]}\n\n    Number of calls: 0\n\n      225 |         await analyzeError(context);\n      226 |\n    > 227 |         expect(mockChat).toHaveBeenCalledWith(\n          |                          ^\n      228 |           expect.objectContaining({\n      229 |             messages: expect.arrayContaining([\n      230 |               expect.objectContaining({\n\n      at tests/llm/errorAdvisor.test.ts:227:26\n      at fulfilled (tests/llm/errorAdvisor.test.ts:28:58)\n\n  ● Error Advisor › analyzeError › context handling › should include all context fields in the analysis request\n\n    TypeError: Cannot read properties of undefined (reading '0')\n\n      249 |         await analyzeError(context);\n      250 |\n    > 251 |         const callArgs = mockChat.mock.calls[0][0];\n          |                                                ^\n      252 |         const userMessage = callArgs.messages.find((m: any) => m.role === 'user');\n      253 |         expect(userMessage).toBeDefined();\n      254 |         const content = JSON.parse(userMessage!.content);\n\n      at tests/llm/errorAdvisor.test.ts:251:48\n      at fulfilled (tests/llm/errorAdvisor.test.ts:28:58)\n\n  ● Error Advisor › analyzeError › output truncation › should truncate long stderr output\n\n    TypeError: Cannot read properties of undefined (reading '0')\n\n      290 |         await analyzeError(context);\n      291 |\n    > 292 |         const callArgs = mockChat.mock.calls[0][0];\n          |                                                ^\n      293 |         const userMessage = callArgs.messages.find((m: any) => m.role === 'user');\n      294 |         expect(userMessage).toBeDefined();\n      295 |         const content = JSON.parse(userMessage!.content);\n\n      at tests/llm/errorAdvisor.test.ts:292:48\n      at fulfilled (tests/llm/errorAdvisor.test.ts:28:58)\n\n  ● Error Advisor › analyzeError › output truncation › should truncate long stdout output\n\n    TypeError: Cannot read properties of undefined (reading '0')\n\n      312 |         await analyzeError(context);\n      313 |\n    > 314 |         const callArgs = mockChat.mock.calls[0][0];\n          |                                                ^\n      315 |         const userMessage = callArgs.messages.find((m: any) => m.role === 'user');\n      316 |         expect(userMessage).toBeDefined();\n      317 |         const content = JSON.parse(userMessage!.content);\n\n      at tests/llm/errorAdvisor.test.ts:314:48\n      at fulfilled (tests/llm/errorAdvisor.test.ts:28:58)\n\n  ● Error Advisor › analyzeError › output truncation › should not truncate short outputs\n\n    TypeError: Cannot read properties of undefined (reading '0')\n\n      332 |         await analyzeError(context);\n      333 |\n    > 334 |         const callArgs = mockChat.mock.calls[0][0];\n          |                                                ^\n      335 |         const userMessage = callArgs.messages.find((m: any) => m.role === 'user');\n      336 |         expect(userMessage).toBeDefined();\n      337 |         const content = JSON.parse(userMessage!.content);\n\n      at tests/llm/errorAdvisor.test.ts:334:48\n      at fulfilled (tests/llm/errorAdvisor.test.ts:28:58)\n\n  ● Error Advisor › analyzeError › error handling › should handle empty response gracefully\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: \"\"\n    Received: undefined\n\n      376 |\n      377 |         const result = await analyzeError(context);\n    > 378 |         expect(result?.text).toBe('');\n          |                              ^\n      379 |       });\n      380 |\n      381 |       it('should handle missing message content', async () => {\n\n      at tests/llm/errorAdvisor.test.ts:378:30\n      at fulfilled (tests/llm/errorAdvisor.test.ts:28:58)\n\n  ● Error Advisor › analyzeError › error handling › should handle missing message content\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: \"\"\n    Received: undefined\n\n      394 |\n      395 |         const result = await analyzeError(context);\n    > 396 |         expect(result?.text).toBe('');\n          |                              ^\n      397 |       });\n      398 |     });\n      399 |\n\n      at tests/llm/errorAdvisor.test.ts:396:30\n      at fulfilled (tests/llm/errorAdvisor.test.ts:28:58)\n\n  ● Error Advisor › analyzeError › system prompt › should include appropriate system prompt\n\n    TypeError: Cannot read properties of undefined (reading '0')\n\n      420 |         await analyzeError(context);\n      421 |\n    > 422 |         const callArgs = mockChat.mock.calls[0][0];\n          |                                                ^\n      423 |         const systemMessage = callArgs.messages.find((m: any) => m.role === 'system');\n      424 |\n      425 |         expect(systemMessage).toBeDefined();\n\n      at tests/llm/errorAdvisor.test.ts:422:48\n      at fulfilled (tests/llm/errorAdvisor.test.ts:28:58)\n\n  ● Error Advisor › analyzeError › edge cases › should handle undefined stderr and stdout\n\n    expect(received).toBeDefined()\n\n    Received: undefined\n\n      451 |\n      452 |         const result = await analyzeError(context);\n    > 453 |         expect(result).toBeDefined();\n          |                        ^\n      454 |         \n      455 |         const callArgs = mockChat.mock.calls[0][0];\n      456 |         const userMessage = callArgs.messages.find((m: any) => m.role === 'user');\n\n      at tests/llm/errorAdvisor.test.ts:453:24\n      at fulfilled (tests/llm/errorAdvisor.test.ts:28:58)\n\n  ● Error Advisor › analyzeError › edge cases › should handle missing exit code\n\n    expect(received).toBeDefined()\n\n    Received: undefined\n\n      478 |\n      479 |         const result = await analyzeError(context);\n    > 480 |         expect(result).toBeDefined();\n          |                        ^\n      481 |       });\n      482 |     });\n      483 |   });\n\n      at tests/llm/errorAdvisor.test.ts:480:24\n      at fulfilled (tests/llm/errorAdvisor.test.ts:28:58)\n","name":"/home/chatgpt/gpt-terminal-plus/tests/llm/errorAdvisor.test.ts","startTime":1755557555246,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["MCP SSE Endpoint"],"duration":528,"failureDetails":[],"failureMessages":[],"fullName":"MCP SSE Endpoint should respond with SSE headers","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should respond with SSE headers"}],"endTime":1755557556452,"message":"","name":"/home/chatgpt/gpt-terminal-plus/tests/mcpSse.test.ts","startTime":1755557555434,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["SshServerHandler","constructor"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"SshServerHandler constructor should initialize with SSH config","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should initialize with SSH config"},{"ancestorTitles":["SshServerHandler","constructor"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"SshServerHandler constructor should handle config without code property","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle config without code property"},{"ancestorTitles":["SshServerHandler","constructor"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"SshServerHandler constructor should work without private key path","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should work without private key path"},{"ancestorTitles":["SshServerHandler","setServerConfig"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"SshServerHandler setServerConfig should update server configuration","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should update server configuration"},{"ancestorTitles":["SshServerHandler","method existence"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"SshServerHandler method existence should have all required AbstractServerHandler methods","invocations":1,"location":null,"numPassingAsserts":7,"retryReasons":[],"status":"passed","title":"should have all required AbstractServerHandler methods"},{"ancestorTitles":["SshServerHandler","error handling"],"duration":10,"failureDetails":[],"failureMessages":[],"fullName":"SshServerHandler error handling should handle file system errors during command execution when private key is missing","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle file system errors during command execution when private key is missing"},{"ancestorTitles":["SshServerHandler","error handling"],"duration":102,"failureDetails":[],"failureMessages":[],"fullName":"SshServerHandler error handling should not try to read private key when path is not specified","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should not try to read private key when path is not specified"}],"endTime":1755557556653,"message":"","name":"/home/chatgpt/gpt-terminal-plus/tests/handlers/ssh/SshServerHandler.test.ts","startTime":1755557556459,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["Route Command Handlers","executeCommand handler"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"Route Command Handlers executeCommand handler should delegate to executeShell by default","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should delegate to executeShell by default"},{"ancestorTitles":["Route Command Handlers","executeCommand handler"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Route Command Handlers executeCommand handler should handle delegation when no execution modes enabled","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle delegation when no execution modes enabled"},{"ancestorTitles":["Route Command Handlers","executeCode handler"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Route Command Handlers executeCode handler should handle missing code in request body","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle missing code in request body"},{"ancestorTitles":["Route Command Handlers","executeCode handler"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Route Command Handlers executeCode handler should handle missing language in request body","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle missing language in request body"},{"ancestorTitles":["Route Command Handlers","executeCode handler"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Route Command Handlers executeCode handler should handle empty code","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle empty code"},{"ancestorTitles":["Route Command Handlers","executeCode handler"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Route Command Handlers executeCode handler should handle empty language","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle empty language"},{"ancestorTitles":["Route Command Handlers","executeCode handler"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Route Command Handlers executeCode handler should handle valid code execution request","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle valid code execution request"},{"ancestorTitles":["Route Command Handlers","executeLlm handler"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Route Command Handlers executeLlm handler should handle missing instructions in request body","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle missing instructions in request body"},{"ancestorTitles":["Route Command Handlers","executeLlm handler"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Route Command Handlers executeLlm handler should handle empty instructions","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle empty instructions"},{"ancestorTitles":["Route Command Handlers","executeLlm handler"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"Route Command Handlers executeLlm handler should handle valid instructions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle valid instructions"},{"ancestorTitles":["Route Command Handlers","executeShell handler"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Route Command Handlers executeShell handler should handle missing command in request body","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle missing command in request body"},{"ancestorTitles":["Route Command Handlers","executeShell handler"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Route Command Handlers executeShell handler should handle empty command","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle empty command"},{"ancestorTitles":["Route Command Handlers","executeShell handler"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Route Command Handlers executeShell handler should handle whitespace-only command","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle whitespace-only command"},{"ancestorTitles":["Route Command Handlers","executeShell handler"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"Route Command Handlers executeShell handler should handle valid shell command","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle valid shell command"},{"ancestorTitles":["Route Command Handlers","changeDirectory handler"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Route Command Handlers changeDirectory handler should handle missing directory in request body","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle missing directory in request body"},{"ancestorTitles":["Route Command Handlers","changeDirectory handler"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Route Command Handlers changeDirectory handler should handle valid directory change","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle valid directory change"},{"ancestorTitles":["Route Command Handlers","integration behavior"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Route Command Handlers integration behavior should handle various input validation patterns","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should handle various input validation patterns"}],"endTime":1755557556798,"message":"","name":"/home/chatgpt/gpt-terminal-plus/tests/routes/command/routeCommandHandlers.test.ts","startTime":1755557556656,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["LM Studio Provider","toOpenAIChatMessages"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"LM Studio Provider toOpenAIChatMessages should convert chat messages to OpenAI format","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should convert chat messages to OpenAI format"},{"ancestorTitles":["LM Studio Provider","toOpenAIChatMessages"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"LM Studio Provider toOpenAIChatMessages should handle empty messages array","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle empty messages array"},{"ancestorTitles":["LM Studio Provider","toOpenAIChatMessages"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"LM Studio Provider toOpenAIChatMessages should preserve message structure","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should preserve message structure"},{"ancestorTitles":["LM Studio Provider","chatWithLmStudio"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"LM Studio Provider chatWithLmStudio should make successful chat request with fetch","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should make successful chat request with fetch"},{"ancestorTitles":["LM Studio Provider","chatWithLmStudio"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"LM Studio Provider chatWithLmStudio should handle model mapping","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle model mapping"},{"ancestorTitles":["LM Studio Provider","chatWithLmStudio"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"LM Studio Provider chatWithLmStudio should handle request without API key","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle request without API key"},{"ancestorTitles":["LM Studio Provider","chatWithLmStudio"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"LM Studio Provider chatWithLmStudio should handle API error responses","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle API error responses"},{"ancestorTitles":["LM Studio Provider","chatWithLmStudio"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"LM Studio Provider chatWithLmStudio should handle malformed response data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle malformed response data"},{"ancestorTitles":["LM Studio Provider","chatWithLmStudio"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"LM Studio Provider chatWithLmStudio should handle response with missing message content","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle response with missing message content"},{"ancestorTitles":["LM Studio Provider","chatWithLmStudioStream"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"LM Studio Provider chatWithLmStudioStream should handle streaming response with fetch","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle streaming response with fetch"},{"ancestorTitles":["LM Studio Provider","chatWithLmStudioStream"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"LM Studio Provider chatWithLmStudioStream should handle streaming with model mapping","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle streaming with model mapping"},{"ancestorTitles":["LM Studio Provider","chatWithLmStudioStream"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"LM Studio Provider chatWithLmStudioStream should handle malformed JSON in stream","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle malformed JSON in stream"},{"ancestorTitles":["LM Studio Provider","chatWithLmStudioStream"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"LM Studio Provider chatWithLmStudioStream should handle empty delta content","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle empty delta content"},{"ancestorTitles":["LM Studio Provider","createLmStudioClient"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"LM Studio Provider createLmStudioClient should create client with chat and chatStream methods","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should create client with chat and chatStream methods"},{"ancestorTitles":["LM Studio Provider","createLmStudioClient"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"LM Studio Provider createLmStudioClient should create client that calls underlying functions","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should create client that calls underlying functions"},{"ancestorTitles":["LM Studio Provider","fetchCompat fallback"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"LM Studio Provider fetchCompat fallback should use http module for http URLs","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should use http module for http URLs"},{"ancestorTitles":["LM Studio Provider","fetchCompat fallback"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"LM Studio Provider fetchCompat fallback should use https module for https URLs","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should use https module for https URLs"},{"ancestorTitles":["LM Studio Provider","fetchCompat fallback"],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"LM Studio Provider fetchCompat fallback should handle request errors in fallback","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle request errors in fallback"},{"ancestorTitles":["LM Studio Provider","streamCompat fallback"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"LM Studio Provider streamCompat fallback should handle streaming with http fallback","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle streaming with http fallback"}],"endTime":1755557556902,"message":"","name":"/home/chatgpt/gpt-terminal-plus/tests/llm/providers/lmstudio.test.ts","startTime":1755557556802,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["middlewares/setupMiddlewares"],"duration":29,"failureDetails":[],"failureMessages":[],"fullName":"middlewares/setupMiddlewares parses urlencoded forms and sets CORS","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"parses urlencoded forms and sets CORS"}],"endTime":1755557557025,"message":"","name":"/home/chatgpt/gpt-terminal-plus/tests/middlewares.setupMiddlewares.test.ts","startTime":1755557556905,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["middleware/checkAuthToken"],"duration":10,"failureDetails":[],"failureMessages":[],"fullName":"middleware/checkAuthToken 401 without token","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"401 without token"},{"ancestorTitles":["middleware/checkAuthToken"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"middleware/checkAuthToken 403 with wrong token","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"403 with wrong token"},{"ancestorTitles":["middleware/checkAuthToken"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"middleware/checkAuthToken 200 with correct token","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"200 with correct token"}],"endTime":1755557557133,"message":"","name":"/home/chatgpt/gpt-terminal-plus/tests/middlewares.checkAuthToken.test.ts","startTime":1755557557036,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["validateEnvironmentVariables"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"validateEnvironmentVariables should run without throwing when all required variables are set","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should run without throwing when all required variables are set"},{"ancestorTitles":["validateEnvironmentVariables"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"validateEnvironmentVariables should run without throwing even when some variables are missing","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should run without throwing even when some variables are missing"},{"ancestorTitles":["validateEnvironmentVariables"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"validateEnvironmentVariables should log a specific debug message when HTTPS is enabled but key or cert paths are missing","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log a specific debug message when HTTPS is enabled but key or cert paths are missing"}],"endTime":1755557557180,"message":"","name":"/home/chatgpt/gpt-terminal-plus/tests/utils/envValidation.test.ts","startTime":1755557557138,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["Ollama Provider","toOllamaMessages"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Ollama Provider toOllamaMessages should convert chat messages to Ollama format","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should convert chat messages to Ollama format"},{"ancestorTitles":["Ollama Provider","toOllamaMessages"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Ollama Provider toOllamaMessages should handle empty messages array","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle empty messages array"},{"ancestorTitles":["Ollama Provider","toOllamaMessages"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Ollama Provider toOllamaMessages should preserve system messages","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should preserve system messages"},{"ancestorTitles":["Ollama Provider","chatWithOllama"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"Ollama Provider chatWithOllama should make successful chat request","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should make successful chat request"},{"ancestorTitles":["Ollama Provider","chatWithOllama"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Ollama Provider chatWithOllama should handle model mapping","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle model mapping"},{"ancestorTitles":["Ollama Provider","chatWithOllama"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"Ollama Provider chatWithOllama should handle API error responses","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle API error responses"},{"ancestorTitles":["Ollama Provider","chatWithOllama"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Ollama Provider chatWithOllama should handle malformed response data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle malformed response data"},{"ancestorTitles":["Ollama Provider","chatWithOllama"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Ollama Provider chatWithOllama should handle response with missing message content","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle response with missing message content"},{"ancestorTitles":["Ollama Provider","chatWithOllama"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Ollama Provider chatWithOllama should handle different base URLs","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle different base URLs"},{"ancestorTitles":["Ollama Provider","chatWithOllamaStream"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Ollama Provider chatWithOllamaStream should handle streaming response with fetch","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle streaming response with fetch"},{"ancestorTitles":["Ollama Provider","chatWithOllamaStream"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Ollama Provider chatWithOllamaStream should handle streaming with model mapping","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle streaming with model mapping"},{"ancestorTitles":["Ollama Provider","chatWithOllamaStream"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Ollama Provider chatWithOllamaStream should handle malformed JSON in stream","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle malformed JSON in stream"},{"ancestorTitles":["Ollama Provider","chatWithOllamaStream"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Ollama Provider chatWithOllamaStream should handle empty message content in stream","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle empty message content in stream"},{"ancestorTitles":["Ollama Provider","chatWithOllamaStream"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Ollama Provider chatWithOllamaStream should handle done flag in stream","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle done flag in stream"},{"ancestorTitles":["Ollama Provider","createOllamaClient"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Ollama Provider createOllamaClient should create client with chat and chatStream methods","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should create client with chat and chatStream methods"},{"ancestorTitles":["Ollama Provider","createOllamaClient"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Ollama Provider createOllamaClient should create client that calls underlying functions","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should create client that calls underlying functions"},{"ancestorTitles":["Ollama Provider","fetchCompat fallback"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"Ollama Provider fetchCompat fallback should use http module for http URLs","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should use http module for http URLs"},{"ancestorTitles":["Ollama Provider","fetchCompat fallback"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"Ollama Provider fetchCompat fallback should use https module for https URLs","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should use https module for https URLs"},{"ancestorTitles":["Ollama Provider","fetchCompat fallback"],"duration":8,"failureDetails":[],"failureMessages":[],"fullName":"Ollama Provider fetchCompat fallback should handle request errors in fallback","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle request errors in fallback"},{"ancestorTitles":["Ollama Provider","fetchCompat fallback"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"Ollama Provider fetchCompat fallback should handle non-200 status codes in fallback","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle non-200 status codes in fallback"},{"ancestorTitles":["Ollama Provider","streamCompat fallback"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"Ollama Provider streamCompat fallback should handle streaming with http fallback","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle streaming with http fallback"}],"endTime":1755557557283,"message":"","name":"/home/chatgpt/gpt-terminal-plus/tests/llm/providers/ollama.test.ts","startTime":1755557557185,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["Module Loading"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"Module Loading should load configHandler module","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should load configHandler module"},{"ancestorTitles":["Module Loading"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Module Loading should load PaginationHandler module","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should load PaginationHandler module"},{"ancestorTitles":["Module Loading"],"duration":51,"failureDetails":[],"failureMessages":[],"fullName":"Module Loading should load ServerManager module","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should load ServerManager module"},{"ancestorTitles":["Module Loading"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"Module Loading should load SSHConnectionManager module","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should load SSHConnectionManager module"},{"ancestorTitles":["Module Loading"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"Module Loading should load initializeServerHandler middleware","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should load initializeServerHandler middleware"},{"ancestorTitles":["Module Loading"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Module Loading should load apiToken utility module","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should load apiToken utility module"},{"ancestorTitles":["Module Loading"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Module Loading should load escapeSpecialChars utility module","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should load escapeSpecialChars utility module"},{"ancestorTitles":["escapeSpecialChars functionality"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"escapeSpecialChars functionality should escape special regex characters","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should escape special regex characters"},{"ancestorTitles":["apiToken functionality"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"apiToken functionality should return a non-empty string token","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return a non-empty string token"},{"ancestorTitles":["configHandler functionality"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"configHandler functionality should generate default configuration","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should generate default configuration"}],"endTime":1755557557387,"message":"","name":"/home/chatgpt/gpt-terminal-plus/tests/expandedCoverage.test.ts","startTime":1755557557287,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["initializeServerHandler middleware"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"initializeServerHandler middleware should export initializeServerHandler","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should export initializeServerHandler"}],"endTime":1755557557478,"message":"","name":"/home/chatgpt/gpt-terminal-plus/tests/middlewares/initializeServerHandler.test.ts","startTime":1755557557391,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["chatForServer routing"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"chatForServer routing uses ollama when server.llm.provider=ollama","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"uses ollama when server.llm.provider=ollama"},{"ancestorTitles":["chatForServer routing"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"chatForServer routing uses lmstudio when server.llm.provider=lmstudio","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"uses lmstudio when server.llm.provider=lmstudio"},{"ancestorTitles":["chatForServer routing"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"chatForServer routing uses openai when server.llm.provider=openai","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"uses openai when server.llm.provider=openai"}],"endTime":1755557557545,"message":"","name":"/home/chatgpt/gpt-terminal-plus/tests/llmProviderRouting.test.ts","startTime":1755557557491,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ServerManager"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"ServerManager should export ServerManager","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should export ServerManager"}],"endTime":1755557557694,"message":"","name":"/home/chatgpt/gpt-terminal-plus/tests/managers/ServerManager.test.ts","startTime":1755557557548,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["Configuration Handler - Comprehensive Tests","isConfigLoaded"],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"Configuration Handler - Comprehensive Tests isConfigLoaded should return true when config file exists","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return true when config file exists"},{"ancestorTitles":["Configuration Handler - Comprehensive Tests","isConfigLoaded"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Configuration Handler - Comprehensive Tests isConfigLoaded should return false when config file does not exist","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return false when config file does not exist"},{"ancestorTitles":["Configuration Handler - Comprehensive Tests","isConfigLoaded"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Configuration Handler - Comprehensive Tests isConfigLoaded should handle different file paths correctly","invocations":1,"location":null,"numPassingAsserts":8,"retryReasons":[],"status":"passed","title":"should handle different file paths correctly"},{"ancestorTitles":["Configuration Handler - Comprehensive Tests","isConfigLoaded"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Configuration Handler - Comprehensive Tests isConfigLoaded should handle empty path","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle empty path"},{"ancestorTitles":["Configuration Handler - Comprehensive Tests","isConfigLoaded"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Configuration Handler - Comprehensive Tests isConfigLoaded should handle special characters in path","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle special characters in path"},{"ancestorTitles":["Configuration Handler - Comprehensive Tests","generateDefaultConfig"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Configuration Handler - Comprehensive Tests generateDefaultConfig should return a valid default configuration object","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should return a valid default configuration object"},{"ancestorTitles":["Configuration Handler - Comprehensive Tests","generateDefaultConfig"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Configuration Handler - Comprehensive Tests generateDefaultConfig should include required top-level properties","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should include required top-level properties"},{"ancestorTitles":["Configuration Handler - Comprehensive Tests","generateDefaultConfig"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Configuration Handler - Comprehensive Tests generateDefaultConfig should have correct local configuration","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should have correct local configuration"},{"ancestorTitles":["Configuration Handler - Comprehensive Tests","generateDefaultConfig"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"Configuration Handler - Comprehensive Tests generateDefaultConfig should have correct SSH configuration structure","invocations":1,"location":null,"numPassingAsserts":9,"retryReasons":[],"status":"passed","title":"should have correct SSH configuration structure"},{"ancestorTitles":["Configuration Handler - Comprehensive Tests","generateDefaultConfig"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Configuration Handler - Comprehensive Tests generateDefaultConfig should have correct SSM configuration structure","invocations":1,"location":null,"numPassingAsserts":7,"retryReasons":[],"status":"passed","title":"should have correct SSM configuration structure"},{"ancestorTitles":["Configuration Handler - Comprehensive Tests","generateDefaultConfig"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Configuration Handler - Comprehensive Tests generateDefaultConfig should return the same structure on multiple calls","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return the same structure on multiple calls"},{"ancestorTitles":["Configuration Handler - Comprehensive Tests","generateDefaultConfig"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Configuration Handler - Comprehensive Tests generateDefaultConfig should return a new object instance each time","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return a new object instance each time"},{"ancestorTitles":["Configuration Handler - Comprehensive Tests","generateDefaultConfig"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Configuration Handler - Comprehensive Tests generateDefaultConfig should have valid data types for all properties","invocations":1,"location":null,"numPassingAsserts":8,"retryReasons":[],"status":"passed","title":"should have valid data types for all properties"},{"ancestorTitles":["Configuration Handler - Comprehensive Tests","persistConfig"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Configuration Handler - Comprehensive Tests persistConfig should write config to specified file path","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should write config to specified file path"},{"ancestorTitles":["Configuration Handler - Comprehensive Tests","persistConfig"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Configuration Handler - Comprehensive Tests persistConfig should format JSON with 3-space indentation","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should format JSON with 3-space indentation"},{"ancestorTitles":["Configuration Handler - Comprehensive Tests","persistConfig"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Configuration Handler - Comprehensive Tests persistConfig should handle empty configuration object","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle empty configuration object"},{"ancestorTitles":["Configuration Handler - Comprehensive Tests","persistConfig"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Configuration Handler - Comprehensive Tests persistConfig should handle null values in configuration","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle null values in configuration"},{"ancestorTitles":["Configuration Handler - Comprehensive Tests","persistConfig"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Configuration Handler - Comprehensive Tests persistConfig should handle complex nested configuration","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle complex nested configuration"},{"ancestorTitles":["Configuration Handler - Comprehensive Tests","persistConfig"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Configuration Handler - Comprehensive Tests persistConfig should handle different file paths and extensions","invocations":1,"location":null,"numPassingAsserts":6,"retryReasons":[],"status":"passed","title":"should handle different file paths and extensions"},{"ancestorTitles":["Configuration Handler - Comprehensive Tests","persistConfig"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Configuration Handler - Comprehensive Tests persistConfig should handle arrays in configuration","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle arrays in configuration"},{"ancestorTitles":["Configuration Handler - Comprehensive Tests","persistConfig"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Configuration Handler - Comprehensive Tests persistConfig should preserve data types in JSON serialization","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should preserve data types in JSON serialization"},{"ancestorTitles":["Configuration Handler - Comprehensive Tests","integration scenarios"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Configuration Handler - Comprehensive Tests integration scenarios should work with generated default config","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should work with generated default config"},{"ancestorTitles":["Configuration Handler - Comprehensive Tests","integration scenarios"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Configuration Handler - Comprehensive Tests integration scenarios should handle config loading workflow","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should handle config loading workflow"},{"ancestorTitles":["Configuration Handler - Comprehensive Tests","error handling"],"duration":11,"failureDetails":[],"failureMessages":[],"fullName":"Configuration Handler - Comprehensive Tests error handling should handle fs.existsSync throwing an error","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle fs.existsSync throwing an error"},{"ancestorTitles":["Configuration Handler - Comprehensive Tests","error handling"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Configuration Handler - Comprehensive Tests error handling should handle fs.writeFileSync throwing an error","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle fs.writeFileSync throwing an error"}],"endTime":1755557557779,"message":"","name":"/home/chatgpt/gpt-terminal-plus/tests/config/configHandler.comprehensive.test.ts","startTime":1755557557697,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["Config Handler","isConfigLoaded"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Config Handler isConfigLoaded should return true if configuration file exists","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return true if configuration file exists"},{"ancestorTitles":["Config Handler","isConfigLoaded"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Config Handler isConfigLoaded should return false if configuration file does not exist","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return false if configuration file does not exist"},{"ancestorTitles":["Config Handler","generateDefaultConfig"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Config Handler generateDefaultConfig should generate a configuration object with default properties","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should generate a configuration object with default properties"},{"ancestorTitles":["Config Handler","persistConfig"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Config Handler persistConfig should write configuration data to disk as JSON","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should write configuration data to disk as JSON"}],"endTime":1755557557828,"message":"","name":"/home/chatgpt/gpt-terminal-plus/src/tests/config/configHandler.test.ts","startTime":1755557557788,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["getFileContent"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"getFileContent should retrieve the content of a file from the SSH server","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should retrieve the content of a file from the SSH server"},{"ancestorTitles":["getFileContent"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"getFileContent should throw an error if SSH client is not provided","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw an error if SSH client is not provided"},{"ancestorTitles":["getFileContent"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"getFileContent should throw an error if SSH server configuration is not provided","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw an error if SSH server configuration is not provided"},{"ancestorTitles":["getFileContent"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"getFileContent should throw an error if file path is not provided","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw an error if file path is not provided"}],"endTime":1755557557903,"message":"","name":"/home/chatgpt/gpt-terminal-plus/src/tests/handlers/ssh/actions/getFileContent.test.ts","startTime":1755557557832,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["Safety Utils - Comprehensive Tests","evaluateCommandSafety","default deny patterns"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"Safety Utils - Comprehensive Tests evaluateCommandSafety default deny patterns should deny commands ending with :/","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should deny commands ending with :/"},{"ancestorTitles":["Safety Utils - Comprehensive Tests","evaluateCommandSafety","default deny patterns"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Safety Utils - Comprehensive Tests evaluateCommandSafety default deny patterns should deny various commands ending with :/","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should deny various commands ending with :/"},{"ancestorTitles":["Safety Utils - Comprehensive Tests","evaluateCommandSafety","default deny patterns"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Safety Utils - Comprehensive Tests evaluateCommandSafety default deny patterns should not deny rm -rf / (it should need confirmation instead)","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should not deny rm -rf / (it should need confirmation instead)"},{"ancestorTitles":["Safety Utils - Comprehensive Tests","evaluateCommandSafety","default confirm patterns"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Safety Utils - Comprehensive Tests evaluateCommandSafety default confirm patterns should require confirmation for dangerous rm commands","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should require confirmation for dangerous rm commands"},{"ancestorTitles":["Safety Utils - Comprehensive Tests","evaluateCommandSafety","default confirm patterns"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Safety Utils - Comprehensive Tests evaluateCommandSafety default confirm patterns should require confirmation for mkfs commands","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should require confirmation for mkfs commands"},{"ancestorTitles":["Safety Utils - Comprehensive Tests","evaluateCommandSafety","default confirm patterns"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Safety Utils - Comprehensive Tests evaluateCommandSafety default confirm patterns should require confirmation for dd commands with space before if=","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should require confirmation for dd commands with space before if="},{"ancestorTitles":["Safety Utils - Comprehensive Tests","evaluateCommandSafety","default confirm patterns"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Safety Utils - Comprehensive Tests evaluateCommandSafety default confirm patterns should not require confirmation for dd commands without proper spacing","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should not require confirmation for dd commands without proper spacing"},{"ancestorTitles":["Safety Utils - Comprehensive Tests","evaluateCommandSafety","default confirm patterns"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Safety Utils - Comprehensive Tests evaluateCommandSafety default confirm patterns should require confirmation for shutdown commands","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should require confirmation for shutdown commands"},{"ancestorTitles":["Safety Utils - Comprehensive Tests","evaluateCommandSafety","default confirm patterns"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Safety Utils - Comprehensive Tests evaluateCommandSafety default confirm patterns should require confirmation for reboot commands","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should require confirmation for reboot commands"},{"ancestorTitles":["Safety Utils - Comprehensive Tests","evaluateCommandSafety","default confirm patterns"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Safety Utils - Comprehensive Tests evaluateCommandSafety default confirm patterns should require confirmation for userdel commands","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should require confirmation for userdel commands"},{"ancestorTitles":["Safety Utils - Comprehensive Tests","evaluateCommandSafety","default confirm patterns"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Safety Utils - Comprehensive Tests evaluateCommandSafety default confirm patterns should require confirmation for iptables flush","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should require confirmation for iptables flush"},{"ancestorTitles":["Safety Utils - Comprehensive Tests","evaluateCommandSafety","default confirm patterns"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Safety Utils - Comprehensive Tests evaluateCommandSafety default confirm patterns should require confirmation for systemctl stop","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should require confirmation for systemctl stop"},{"ancestorTitles":["Safety Utils - Comprehensive Tests","evaluateCommandSafety","safe commands"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"Safety Utils - Comprehensive Tests evaluateCommandSafety safe commands should allow safe commands without confirmation","invocations":1,"location":null,"numPassingAsserts":36,"retryReasons":[],"status":"passed","title":"should allow safe commands without confirmation"},{"ancestorTitles":["Safety Utils - Comprehensive Tests","evaluateCommandSafety","environment variable overrides"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Safety Utils - Comprehensive Tests evaluateCommandSafety environment variable overrides should use DENY_COMMAND_REGEX from environment","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should use DENY_COMMAND_REGEX from environment"},{"ancestorTitles":["Safety Utils - Comprehensive Tests","evaluateCommandSafety","environment variable overrides"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Safety Utils - Comprehensive Tests evaluateCommandSafety environment variable overrides should use CONFIRM_COMMAND_REGEX from environment","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should use CONFIRM_COMMAND_REGEX from environment"},{"ancestorTitles":["Safety Utils - Comprehensive Tests","evaluateCommandSafety","environment variable overrides"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Safety Utils - Comprehensive Tests evaluateCommandSafety environment variable overrides should handle multiple patterns in environment variables","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle multiple patterns in environment variables"},{"ancestorTitles":["Safety Utils - Comprehensive Tests","evaluateCommandSafety","environment variable overrides"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Safety Utils - Comprehensive Tests evaluateCommandSafety environment variable overrides should handle invalid regex patterns gracefully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle invalid regex patterns gracefully"},{"ancestorTitles":["Safety Utils - Comprehensive Tests","evaluateCommandSafety","environment variable overrides"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Safety Utils - Comprehensive Tests evaluateCommandSafety environment variable overrides should handle empty environment variables","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle empty environment variables"},{"ancestorTitles":["Safety Utils - Comprehensive Tests","evaluateCommandSafety","case insensitive matching"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Safety Utils - Comprehensive Tests evaluateCommandSafety case insensitive matching should match patterns case insensitively","invocations":1,"location":null,"numPassingAsserts":6,"retryReasons":[],"status":"passed","title":"should match patterns case insensitively"},{"ancestorTitles":["Safety Utils - Comprehensive Tests","evaluateCommandSafety","complex command scenarios"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Safety Utils - Comprehensive Tests evaluateCommandSafety complex command scenarios should handle commands with pipes and redirects","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle commands with pipes and redirects"},{"ancestorTitles":["Safety Utils - Comprehensive Tests","evaluateCommandSafety","complex command scenarios"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Safety Utils - Comprehensive Tests evaluateCommandSafety complex command scenarios should handle commands with multiple dangerous patterns","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should handle commands with multiple dangerous patterns"},{"ancestorTitles":["Safety Utils - Comprehensive Tests","evaluateCommandSafety","complex command scenarios"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Safety Utils - Comprehensive Tests evaluateCommandSafety complex command scenarios should handle commands with sudo","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle commands with sudo"},{"ancestorTitles":["Safety Utils - Comprehensive Tests","evaluateCommandSafety","complex command scenarios"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Safety Utils - Comprehensive Tests evaluateCommandSafety complex command scenarios should handle commands with full paths","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle commands with full paths"},{"ancestorTitles":["Safety Utils - Comprehensive Tests","evaluateCommandSafety","edge cases"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Safety Utils - Comprehensive Tests evaluateCommandSafety edge cases should handle empty commands","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should handle empty commands"},{"ancestorTitles":["Safety Utils - Comprehensive Tests","evaluateCommandSafety","edge cases"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Safety Utils - Comprehensive Tests evaluateCommandSafety edge cases should handle whitespace-only commands","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should handle whitespace-only commands"},{"ancestorTitles":["Safety Utils - Comprehensive Tests","evaluateCommandSafety","edge cases"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Safety Utils - Comprehensive Tests evaluateCommandSafety edge cases should handle very long commands","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle very long commands"},{"ancestorTitles":["Safety Utils - Comprehensive Tests","evaluateCommandSafety","edge cases"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Safety Utils - Comprehensive Tests evaluateCommandSafety edge cases should handle commands with special characters","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle commands with special characters"},{"ancestorTitles":["Safety Utils - Comprehensive Tests","evaluateCommandSafety","pattern matching accuracy"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Safety Utils - Comprehensive Tests evaluateCommandSafety pattern matching accuracy should not match partial words incorrectly","invocations":1,"location":null,"numPassingAsserts":6,"retryReasons":[],"status":"passed","title":"should not match partial words incorrectly"},{"ancestorTitles":["Safety Utils - Comprehensive Tests","evaluateCommandSafety","pattern matching accuracy"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Safety Utils - Comprehensive Tests evaluateCommandSafety pattern matching accuracy should match word boundaries correctly","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should match word boundaries correctly"}],"endTime":1755557557975,"message":"","name":"/home/chatgpt/gpt-terminal-plus/tests/utils/safety.comprehensive.test.ts","startTime":1755557557906,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["utils/envValidation"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"utils/envValidation runs without throwing when vars missing","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"runs without throwing when vars missing"},{"ancestorTitles":["utils/envValidation"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"utils/envValidation logs with variables set","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"logs with variables set"}],"endTime":1755557558014,"message":"","name":"/home/chatgpt/gpt-terminal-plus/tests/utils.envValidation.test.ts","startTime":1755557557980,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["executeLlm"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"executeLlm should call the OpenAI-compatible endpoint and return the response","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should call the OpenAI-compatible endpoint and return the response"},{"ancestorTitles":["executeLlmStream"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"executeLlmStream should call the OpenAI-compatible endpoint and stream the response","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should call the OpenAI-compatible endpoint and stream the response"}],"endTime":1755557558082,"message":"","name":"/home/chatgpt/gpt-terminal-plus/src/tests/llm/openai.test.ts","startTime":1755557558017,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["getSystemInfo"],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"getSystemInfo should throw an error if SSH client is not provided","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw an error if SSH client is not provided"},{"ancestorTitles":["getSystemInfo"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"getSystemInfo should throw an error if shell is not provided","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw an error if shell is not provided"},{"ancestorTitles":["getSystemInfo"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"getSystemInfo should throw an error if script path is not provided","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw an error if script path is not provided"}],"endTime":1755557558147,"message":"","name":"/home/chatgpt/gpt-terminal-plus/src/tests/handlers/ssh/actions/getSystemInfo.test.ts","startTime":1755557558085,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["getOrGenerateApiToken"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"getOrGenerateApiToken should generate a new token if API_TOKEN is not set","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should generate a new token if API_TOKEN is not set"},{"ancestorTitles":["getOrGenerateApiToken"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"getOrGenerateApiToken should return existing token if API_TOKEN is set","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return existing token if API_TOKEN is set"}],"endTime":1755557558188,"message":"","name":"/home/chatgpt/gpt-terminal-plus/src/common/apiToken.test.ts","startTime":1755557558150,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["getServerHandler"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"getServerHandler should return the server handler from the request","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return the server handler from the request"},{"ancestorTitles":["getServerHandler"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"getServerHandler should throw an error if the server handler is not found","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw an error if the server handler is not found"}],"endTime":1755557558232,"message":"","name":"/home/chatgpt/gpt-terminal-plus/tests/utils/getServerHandler.test.ts","startTime":1755557558195,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["getSystemInfo"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"getSystemInfo should return the result of the execution function","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return the result of the execution function"},{"ancestorTitles":["getSystemInfo"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"getSystemInfo should throw an error if the execution function is not provided","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw an error if the execution function is not provided"},{"ancestorTitles":["getSystemInfo"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"getSystemInfo should throw an error if the execution function is not a function","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw an error if the execution function is not a function"},{"ancestorTitles":["getSystemInfo"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"getSystemInfo should throw an error if the execution function fails","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should throw an error if the execution function fails"}],"endTime":1755557558280,"message":"","name":"/home/chatgpt/gpt-terminal-plus/tests/common/getSystemInfo.test.ts","startTime":1755557558235,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["executeLocalCode"],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"executeLocalCode should throw an error if code is not provided","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw an error if code is not provided"},{"ancestorTitles":["executeLocalCode"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"executeLocalCode should throw an error if language is not provided","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw an error if language is not provided"},{"ancestorTitles":["executeLocalCode"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"executeLocalCode should execute command and resolve with stdout and stderr","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should execute command and resolve with stdout and stderr"},{"ancestorTitles":["executeLocalCode"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"executeLocalCode should construct command with directory when provided","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should construct command with directory when provided"},{"ancestorTitles":["executeLocalCode"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"executeLocalCode should reject if exec returns an error","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should reject if exec returns an error"}],"endTime":1755557558329,"message":"","name":"/home/chatgpt/gpt-terminal-plus/tests/handlers/local/actions/executeCode.test.ts","startTime":1755557558283,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["executeCommand with execFile (USE_EXECFILE=true)"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"executeCommand with execFile (USE_EXECFILE=true) should execute command using execFile and return output","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should execute command using execFile and return output"},{"ancestorTitles":["executeCommand with execFile (USE_EXECFILE=true)"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"executeCommand with execFile (USE_EXECFILE=true) should reject if execFile returns an error","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should reject if execFile returns an error"},{"ancestorTitles":["executeCommand with exec (USE_EXECFILE=false)"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"executeCommand with exec (USE_EXECFILE=false) should execute command using exec and return output","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should execute command using exec and return output"},{"ancestorTitles":["executeCommand with exec (USE_EXECFILE=false)"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"executeCommand with exec (USE_EXECFILE=false) should reject if exec returns an error","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should reject if exec returns an error"}],"endTime":1755557558387,"message":"","name":"/home/chatgpt/gpt-terminal-plus/src/tests/handlers/local/actions/executeCommand.test.ts","startTime":1755557558332,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["SSHConnectionManager"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"SSHConnectionManager should export SSHConnectionManager","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should export SSHConnectionManager"}],"endTime":1755557558444,"message":"","name":"/home/chatgpt/gpt-terminal-plus/tests/managers/SSHConnectionManager.test.ts","startTime":1755557558389,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["redact"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"redact should redact sensitive keys","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should redact sensitive keys"},{"ancestorTitles":["redact"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"redact should not redact non-sensitive keys","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should not redact non-sensitive keys"},{"ancestorTitles":["redact"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"redact should handle non-string values","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle non-string values"},{"ancestorTitles":["redact"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"redact should return error message for invalid key type","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return error message for invalid key type"},{"ancestorTitles":["redact"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"redact should handle null or undefined values","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle null or undefined values"}],"endTime":1755557558517,"message":"","name":"/home/chatgpt/gpt-terminal-plus/tests/utils/redact.test.ts","startTime":1755557558453,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["Error Handler Middleware","validation errors"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"Error Handler Middleware validation errors should handle ValidationError with 400 status","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle ValidationError with 400 status"},{"ancestorTitles":["Error Handler Middleware","validation errors"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Error Handler Middleware validation errors should handle ValidationError without details","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle ValidationError without details"},{"ancestorTitles":["Error Handler Middleware","authentication errors"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"Error Handler Middleware authentication errors should handle UnauthorizedError with 401 status","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle UnauthorizedError with 401 status"},{"ancestorTitles":["Error Handler Middleware","authentication errors"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Error Handler Middleware authentication errors should handle UnauthorizedError with empty message","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle UnauthorizedError with empty message"},{"ancestorTitles":["Error Handler Middleware","authorization errors"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Error Handler Middleware authorization errors should handle ForbiddenError with 403 status","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle ForbiddenError with 403 status"},{"ancestorTitles":["Error Handler Middleware","not found errors"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Error Handler Middleware not found errors should handle NotFoundError with 404 status","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle NotFoundError with 404 status"},{"ancestorTitles":["Error Handler Middleware","server errors"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"Error Handler Middleware server errors should handle generic errors with 500 status","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle generic errors with 500 status"},{"ancestorTitles":["Error Handler Middleware","server errors"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Error Handler Middleware server errors should handle errors without message","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle errors without message"},{"ancestorTitles":["Error Handler Middleware","server errors"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Error Handler Middleware server errors should handle unknown error types","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle unknown error types"},{"ancestorTitles":["Error Handler Middleware","error object variations"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Error Handler Middleware error object variations should handle non-Error objects","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle non-Error objects"},{"ancestorTitles":["Error Handler Middleware","error object variations"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Error Handler Middleware error object variations should handle null errors","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle null errors"},{"ancestorTitles":["Error Handler Middleware","error object variations"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Error Handler Middleware error object variations should handle undefined errors","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle undefined errors"},{"ancestorTitles":["Error Handler Middleware","error object variations"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Error Handler Middleware error object variations should handle errors with custom properties","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle errors with custom properties"},{"ancestorTitles":["Error Handler Middleware","GPTActionError interface"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Error Handler Middleware GPTActionError interface should create proper GPTActionError structure","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should create proper GPTActionError structure"},{"ancestorTitles":["Error Handler Middleware","GPTActionError interface"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"Error Handler Middleware GPTActionError interface should handle all error types correctly","invocations":1,"location":null,"numPassingAsserts":10,"retryReasons":[],"status":"passed","title":"should handle all error types correctly"},{"ancestorTitles":["Error Handler Middleware","middleware behavior"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Error Handler Middleware middleware behavior should not call next function","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should not call next function"},{"ancestorTitles":["Error Handler Middleware","middleware behavior"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Error Handler Middleware middleware behavior should always send a response","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should always send a response"},{"ancestorTitles":["Error Handler Middleware","middleware behavior"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Error Handler Middleware middleware behavior should handle multiple error properties","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle multiple error properties"}],"endTime":1755557558688,"message":"","name":"/home/chatgpt/gpt-terminal-plus/tests/middlewares/errorHandler.test.ts","startTime":1755557558521,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["getExecuteCommand"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"getExecuteCommand should return the correct command for bash shell","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return the correct command for bash shell"},{"ancestorTitles":["getExecuteCommand"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"getExecuteCommand should return the correct command for powershell","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return the correct command for powershell"},{"ancestorTitles":["getExecuteCommand"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"getExecuteCommand should return the correct command for python","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return the correct command for python"},{"ancestorTitles":["getExecuteCommand"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"getExecuteCommand should throw error if shell is not provided","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error if shell is not provided"},{"ancestorTitles":["getExecuteCommand"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"getExecuteCommand should throw error if filePath is not provided","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error if filePath is not provided"}],"endTime":1755557558735,"message":"","name":"/home/chatgpt/gpt-terminal-plus/src/common/getExecuteCommand.test.ts","startTime":1755557558691,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["utils/redact"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"utils/redact redacts sensitive keys","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"redacts sensitive keys"},{"ancestorTitles":["utils/redact"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"utils/redact stringifies non-string values","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"stringifies non-string values"},{"ancestorTitles":["utils/redact"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"utils/redact handles null and invalid key types","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"handles null and invalid key types"}],"endTime":1755557558778,"message":"","name":"/home/chatgpt/gpt-terminal-plus/tests/utils.redact.test.ts","startTime":1755557558737,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["escapeRegExp"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"escapeRegExp should escape special characters in the string","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should escape special characters in the string"},{"ancestorTitles":["escapeRegExp"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"escapeRegExp should not alter a string without special characters","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should not alter a string without special characters"},{"ancestorTitles":["escapeRegExp"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"escapeRegExp should handle an empty string","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle an empty string"},{"ancestorTitles":["escapeRegExp"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"escapeRegExp should handle strings with only special characters","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle strings with only special characters"}],"endTime":1755557558818,"message":"","name":"/home/chatgpt/gpt-terminal-plus/src/tests/utils/escapeRegExp.test.ts","startTime":1755557558780,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["utils/safety"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"utils/safety uses env patterns for confirm and deny","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"uses env patterns for confirm and deny"}],"endTime":1755557558868,"message":"","name":"/home/chatgpt/gpt-terminal-plus/tests/utils.safety.test.ts","startTime":1755557558821,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["getOrGenerateApiToken"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"getOrGenerateApiToken should return the existing API_TOKEN if it exists","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return the existing API_TOKEN if it exists"},{"ancestorTitles":["getOrGenerateApiToken"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"getOrGenerateApiToken should generate a new API_TOKEN if it does not exist","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should generate a new API_TOKEN if it does not exist"},{"ancestorTitles":["getOrGenerateApiToken"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"getOrGenerateApiToken should generate a new API_TOKEN only once if called multiple times without API_TOKEN set","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should generate a new API_TOKEN only once if called multiple times without API_TOKEN set"}],"endTime":1755557558907,"message":"","name":"/home/chatgpt/gpt-terminal-plus/tests/common/apiToken.test.ts","startTime":1755557558870,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["checkAuthToken middleware"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"checkAuthToken middleware should export checkAuthToken","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should export checkAuthToken"}],"endTime":1755557558951,"message":"","name":"/home/chatgpt/gpt-terminal-plus/tests/middlewares/checkAuthToken.test.ts","startTime":1755557558912,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["pagination helpers"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"pagination helpers utils paginate returns correct slice and total","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"utils paginate returns correct slice and total"},{"ancestorTitles":["pagination helpers"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"pagination helpers handler paginate returns correct slice and total","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"handler paginate returns correct slice and total"}],"endTime":1755557558989,"message":"","name":"/home/chatgpt/gpt-terminal-plus/tests/utils.pagination.test.ts","startTime":1755557558953,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["executeCommand"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"executeCommand should be defined","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should be defined"}],"endTime":1755557559031,"message":"","name":"/home/chatgpt/gpt-terminal-plus/tests/handlers/local/actions/executeCommand.test.ts","startTime":1755557558992,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["configHandler"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"configHandler should export isConfigLoaded","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should export isConfigLoaded"},{"ancestorTitles":["configHandler"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"configHandler should export generateDefaultConfig","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should export generateDefaultConfig"},{"ancestorTitles":["configHandler"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"configHandler should export persistConfig","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should export persistConfig"}],"endTime":1755557559069,"message":"","name":"/home/chatgpt/gpt-terminal-plus/tests/config/configHandler.test.ts","startTime":1755557559034,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["utils/getServerHandler"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"utils/getServerHandler throws when req.server missing","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"throws when req.server missing"},{"ancestorTitles":["utils/getServerHandler"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"utils/getServerHandler returns handler when present","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"returns handler when present"}],"endTime":1755557559113,"message":"","name":"/home/chatgpt/gpt-terminal-plus/tests/utils.getServerHandler.test.ts","startTime":1755557559072,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["escapeSpecialChars"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"escapeSpecialChars should escape special characters in a string","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should escape special characters in a string"},{"ancestorTitles":["escapeSpecialChars"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"escapeSpecialChars should not modify a string with no special characters","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should not modify a string with no special characters"},{"ancestorTitles":["escapeSpecialChars"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"escapeSpecialChars should handle an empty string","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle an empty string"},{"ancestorTitles":["escapeSpecialChars"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"escapeSpecialChars should escape special characters in a mixed string","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should escape special characters in a mixed string"}],"endTime":1755557559150,"message":"","name":"/home/chatgpt/gpt-terminal-plus/src/tests/common/escapeSpecialChars.test.ts","startTime":1755557559116,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["escapeRegExp"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"escapeRegExp escapes regex special characters","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"escapes regex special characters"},{"ancestorTitles":["escapeRegExp"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"escapeRegExp returns the same string if no special characters","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"returns the same string if no special characters"}],"endTime":1755557559190,"message":"","name":"/home/chatgpt/gpt-terminal-plus/tests/utils/escapeRegExp.test.ts","startTime":1755557559152,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["PaginationHandler"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"PaginationHandler should export paginate function","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should export paginate function"}],"endTime":1755557559225,"message":"","name":"/home/chatgpt/gpt-terminal-plus/tests/handlers/PaginationHandler.test.ts","startTime":1755557559192,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":[],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"basic addition","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"basic addition"}],"endTime":1755557559261,"message":"","name":"/home/chatgpt/gpt-terminal-plus/src/tests/simple/basic.test.ts","startTime":1755557559228,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["AbstractServerHandler"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"AbstractServerHandler should allow extension and basic functionality","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should allow extension and basic functionality"}],"endTime":1755557559301,"message":"","name":"/home/chatgpt/gpt-terminal-plus/tests/handlers/AbstractServerHandler.test.ts","startTime":1755557559267,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["escapeSpecialChars"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"escapeSpecialChars should not modify a string with no special characters","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should not modify a string with no special characters"},{"ancestorTitles":["escapeSpecialChars"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"escapeSpecialChars should escape regex special characters","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should escape regex special characters"},{"ancestorTitles":["escapeSpecialChars"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"escapeSpecialChars should escape multiple occurrences of special characters","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should escape multiple occurrences of special characters"}],"endTime":1755557559338,"message":"","name":"/home/chatgpt/gpt-terminal-plus/src/common/escapeSpecialChars.test.ts","startTime":1755557559304,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["utils/escapeRegExp"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"utils/escapeRegExp escapes regex special chars","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"escapes regex special chars"}],"endTime":1755557559377,"message":"","name":"/home/chatgpt/gpt-terminal-plus/tests/utils.escapeRegExp.test.ts","startTime":1755557559344,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["types"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"types should have tests","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should have tests"}],"endTime":1755557559414,"message":"","name":"/home/chatgpt/gpt-terminal-plus/tests/types.test.ts","startTime":1755557559380,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["utils/handleServerError"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"utils/handleServerError responds with 500 and error message","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"responds with 500 and error message"}],"endTime":1755557559453,"message":"","name":"/home/chatgpt/gpt-terminal-plus/tests/utils.handleServerError.test.ts","startTime":1755557559419,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["execute-file (removed)"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"execute-file (removed) endpoint no longer exists","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"endpoint no longer exists"}],"endTime":1755557559488,"message":"","name":"/home/chatgpt/gpt-terminal-plus/tests/executeFile.errorAnalysis.test.ts","startTime":1755557559456,"status":"passed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1755557566821,"message":"  ● Test suite failed to run\n\n    \u001b[96mtests/routes/command/executeLlm.comprehensive.test.ts\u001b[0m:\u001b[93m315\u001b[0m:\u001b[93m47\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type '{ provider: string; choices: { index: number; message: { role: \"assistant\"; content: string; }; }[]; }' is not assignable to parameter of type 'ChatResponse | Promise<ChatResponse>'.\n      Property 'model' is missing in type '{ provider: string; choices: { index: number; message: { role: \"assistant\"; content: string; }; }[]; }' but required in type 'ChatResponse'.\n\n    \u001b[7m315\u001b[0m       mockLlm.chatForServer.mockResolvedValue({\n    \u001b[7m   \u001b[0m \u001b[91m                                              ~\u001b[0m\n    \u001b[7m316\u001b[0m         provider: 'openai',\n    \u001b[7m   \u001b[0m \u001b[91m~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[7m...\u001b[0m \n    \u001b[7m322\u001b[0m         }]\n    \u001b[7m   \u001b[0m \u001b[91m~~~~~~~~~~\u001b[0m\n    \u001b[7m323\u001b[0m       });\n    \u001b[7m   \u001b[0m \u001b[91m~~~~~~~\u001b[0m\n\n      \u001b[96msrc/llm/types.ts\u001b[0m:\u001b[93m20\u001b[0m:\u001b[93m3\u001b[0m\n        \u001b[7m20\u001b[0m   model: string;\n        \u001b[7m  \u001b[0m \u001b[96m  ~~~~~\u001b[0m\n        'model' is declared here.\n    \u001b[96mtests/routes/command/executeLlm.comprehensive.test.ts\u001b[0m:\u001b[93m366\u001b[0m:\u001b[93m47\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type '{ provider: string; choices: { index: number; message: { role: \"assistant\"; content: string; }; }[]; }' is not assignable to parameter of type 'ChatResponse | Promise<ChatResponse>'.\n      Property 'model' is missing in type '{ provider: string; choices: { index: number; message: { role: \"assistant\"; content: string; }; }[]; }' but required in type 'ChatResponse'.\n\n    \u001b[7m366\u001b[0m       mockLlm.chatForServer.mockResolvedValue({\n    \u001b[7m   \u001b[0m \u001b[91m                                              ~\u001b[0m\n    \u001b[7m367\u001b[0m         provider: 'openai',\n    \u001b[7m   \u001b[0m \u001b[91m~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[7m...\u001b[0m \n    \u001b[7m373\u001b[0m         }]\n    \u001b[7m   \u001b[0m \u001b[91m~~~~~~~~~~\u001b[0m\n    \u001b[7m374\u001b[0m       });\n    \u001b[7m   \u001b[0m \u001b[91m~~~~~~~\u001b[0m\n\n      \u001b[96msrc/llm/types.ts\u001b[0m:\u001b[93m20\u001b[0m:\u001b[93m3\u001b[0m\n        \u001b[7m20\u001b[0m   model: string;\n        \u001b[7m  \u001b[0m \u001b[96m  ~~~~~\u001b[0m\n        'model' is declared here.\n    \u001b[96mtests/routes/command/executeLlm.comprehensive.test.ts\u001b[0m:\u001b[93m428\u001b[0m:\u001b[93m47\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type '{ provider: string; choices: { index: number; message: { role: \"assistant\"; content: string; }; }[]; }' is not assignable to parameter of type 'ChatResponse | Promise<ChatResponse>'.\n      Property 'model' is missing in type '{ provider: string; choices: { index: number; message: { role: \"assistant\"; content: string; }; }[]; }' but required in type 'ChatResponse'.\n\n    \u001b[7m428\u001b[0m       mockLlm.chatForServer.mockResolvedValue({\n    \u001b[7m   \u001b[0m \u001b[91m                                              ~\u001b[0m\n    \u001b[7m429\u001b[0m         provider: 'openai',\n    \u001b[7m   \u001b[0m \u001b[91m~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[7m...\u001b[0m \n    \u001b[7m435\u001b[0m         }]\n    \u001b[7m   \u001b[0m \u001b[91m~~~~~~~~~~\u001b[0m\n    \u001b[7m436\u001b[0m       });\n    \u001b[7m   \u001b[0m \u001b[91m~~~~~~~\u001b[0m\n\n      \u001b[96msrc/llm/types.ts\u001b[0m:\u001b[93m20\u001b[0m:\u001b[93m3\u001b[0m\n        \u001b[7m20\u001b[0m   model: string;\n        \u001b[7m  \u001b[0m \u001b[96m  ~~~~~\u001b[0m\n        'model' is declared here.\n    \u001b[96mtests/routes/command/executeLlm.comprehensive.test.ts\u001b[0m:\u001b[93m555\u001b[0m:\u001b[93m9\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2353: \u001b[0mObject literal may only specify known properties, and 'suggestions' does not exist in type 'ErrorAnalysis | Promise<ErrorAnalysis | undefined>'.\n\n    \u001b[7m555\u001b[0m         suggestions: ['Check if command is installed']\n    \u001b[7m   \u001b[0m \u001b[91m        ~~~~~~~~~~~\u001b[0m\n    \u001b[96mtests/routes/command/executeLlm.comprehensive.test.ts\u001b[0m:\u001b[93m738\u001b[0m:\u001b[93m1\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1005: \u001b[0m'}' expected.\n\n    \u001b[7m738\u001b[0m \n    \u001b[7m   \u001b[0m \u001b[91m\u001b[0m\n\n      \u001b[96mtests/routes/command/executeLlm.comprehensive.test.ts\u001b[0m:\u001b[93m224\u001b[0m:\u001b[93m37\u001b[0m\n        \u001b[7m224\u001b[0m   describe('LLM interaction', () => {\n        \u001b[7m   \u001b[0m \u001b[96m                                    ~\u001b[0m\n        The parser expected to find a '}' to match the '{' token here.\n","name":"/home/chatgpt/gpt-terminal-plus/tests/routes/command/executeLlm.comprehensive.test.ts","startTime":1755557566821,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1755557566821,"message":"  ● Test suite failed to run\n\n    \u001b[96mtests/handlers/ssm/SsmServerHandler.test.ts\u001b[0m:\u001b[93m48\u001b[0m:\u001b[93m32\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type 'any' is not assignable to parameter of type 'never'.\n\n    \u001b[7m48\u001b[0m         .mockResolvedValueOnce(mockSendResponse as any)\n    \u001b[7m  \u001b[0m \u001b[91m                               ~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96mtests/handlers/ssm/SsmServerHandler.test.ts\u001b[0m:\u001b[93m49\u001b[0m:\u001b[93m32\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type 'any' is not assignable to parameter of type 'never'.\n\n    \u001b[7m49\u001b[0m         .mockResolvedValueOnce(mockInvocationResponse as any);\n    \u001b[7m  \u001b[0m \u001b[91m                               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96mtests/handlers/ssm/SsmServerHandler.test.ts\u001b[0m:\u001b[93m80\u001b[0m:\u001b[93m32\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type 'any' is not assignable to parameter of type 'never'.\n\n    \u001b[7m80\u001b[0m         .mockResolvedValueOnce(mockSendResponse as any)\n    \u001b[7m  \u001b[0m \u001b[91m                               ~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96mtests/handlers/ssm/SsmServerHandler.test.ts\u001b[0m:\u001b[93m81\u001b[0m:\u001b[93m32\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type 'any' is not assignable to parameter of type 'never'.\n\n    \u001b[7m81\u001b[0m         .mockResolvedValueOnce(mockInvocationResponse as any);\n    \u001b[7m  \u001b[0m \u001b[91m                               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96mtests/handlers/ssm/SsmServerHandler.test.ts\u001b[0m:\u001b[93m105\u001b[0m:\u001b[93m32\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type 'any' is not assignable to parameter of type 'never'.\n\n    \u001b[7m105\u001b[0m         .mockResolvedValueOnce(mockSendResponse as any)\n    \u001b[7m   \u001b[0m \u001b[91m                               ~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96mtests/handlers/ssm/SsmServerHandler.test.ts\u001b[0m:\u001b[93m106\u001b[0m:\u001b[93m28\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type 'any' is not assignable to parameter of type 'never'.\n\n    \u001b[7m106\u001b[0m         .mockResolvedValue(mockInvocationResponse as any);\n    \u001b[7m   \u001b[0m \u001b[91m                           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96mtests/handlers/ssm/SsmServerHandler.test.ts\u001b[0m:\u001b[93m128\u001b[0m:\u001b[93m41\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type 'any' is not assignable to parameter of type 'never'.\n\n    \u001b[7m128\u001b[0m       mockClient.send.mockRejectedValue(new Error('AWS SDK Error') as any);\n    \u001b[7m   \u001b[0m \u001b[91m                                        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96mtests/handlers/ssm/SsmServerHandler.test.ts\u001b[0m:\u001b[93m145\u001b[0m:\u001b[93m45\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type 'any' is not assignable to parameter of type 'never'.\n\n    \u001b[7m145\u001b[0m       mockClient.send.mockResolvedValueOnce(mockSendResponse as any);\n    \u001b[7m   \u001b[0m \u001b[91m                                            ~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96mtests/handlers/ssm/SsmServerHandler.test.ts\u001b[0m:\u001b[93m174\u001b[0m:\u001b[93m32\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type 'any' is not assignable to parameter of type 'never'.\n\n    \u001b[7m174\u001b[0m         .mockResolvedValueOnce(mockSendResponse as any)\n    \u001b[7m   \u001b[0m \u001b[91m                               ~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96mtests/handlers/ssm/SsmServerHandler.test.ts\u001b[0m:\u001b[93m175\u001b[0m:\u001b[93m32\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type 'any' is not assignable to parameter of type 'never'.\n\n    \u001b[7m175\u001b[0m         .mockResolvedValueOnce(mockInvocationResponse as any);\n    \u001b[7m   \u001b[0m \u001b[91m                               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96mtests/handlers/ssm/SsmServerHandler.test.ts\u001b[0m:\u001b[93m202\u001b[0m:\u001b[93m32\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type 'any' is not assignable to parameter of type 'never'.\n\n    \u001b[7m202\u001b[0m         .mockResolvedValueOnce(mockSendResponse as any)\n    \u001b[7m   \u001b[0m \u001b[91m                               ~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96mtests/handlers/ssm/SsmServerHandler.test.ts\u001b[0m:\u001b[93m203\u001b[0m:\u001b[93m32\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type 'any' is not assignable to parameter of type 'never'.\n\n    \u001b[7m203\u001b[0m         .mockResolvedValueOnce(mockInvocationResponse as any);\n    \u001b[7m   \u001b[0m \u001b[91m                               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96mtests/handlers/ssm/SsmServerHandler.test.ts\u001b[0m:\u001b[93m232\u001b[0m:\u001b[93m32\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type 'any' is not assignable to parameter of type 'never'.\n\n    \u001b[7m232\u001b[0m         .mockResolvedValueOnce(mockSendResponse as any)\n    \u001b[7m   \u001b[0m \u001b[91m                               ~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96mtests/handlers/ssm/SsmServerHandler.test.ts\u001b[0m:\u001b[93m233\u001b[0m:\u001b[93m32\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type 'any' is not assignable to parameter of type 'never'.\n\n    \u001b[7m233\u001b[0m         .mockResolvedValueOnce(mockInvocationResponse as any);\n    \u001b[7m   \u001b[0m \u001b[91m                               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96mtests/handlers/ssm/SsmServerHandler.test.ts\u001b[0m:\u001b[93m260\u001b[0m:\u001b[93m32\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type 'any' is not assignable to parameter of type 'never'.\n\n    \u001b[7m260\u001b[0m         .mockResolvedValueOnce(mockSendResponse as any)\n    \u001b[7m   \u001b[0m \u001b[91m                               ~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96mtests/handlers/ssm/SsmServerHandler.test.ts\u001b[0m:\u001b[93m261\u001b[0m:\u001b[93m32\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type 'any' is not assignable to parameter of type 'never'.\n\n    \u001b[7m261\u001b[0m         .mockResolvedValueOnce(mockInvocationResponse as any);\n    \u001b[7m   \u001b[0m \u001b[91m                               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96mtests/handlers/ssm/SsmServerHandler.test.ts\u001b[0m:\u001b[93m290\u001b[0m:\u001b[93m32\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type 'any' is not assignable to parameter of type 'never'.\n\n    \u001b[7m290\u001b[0m         .mockResolvedValueOnce(mockSendResponse as any)\n    \u001b[7m   \u001b[0m \u001b[91m                               ~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96mtests/handlers/ssm/SsmServerHandler.test.ts\u001b[0m:\u001b[93m291\u001b[0m:\u001b[93m32\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type 'any' is not assignable to parameter of type 'never'.\n\n    \u001b[7m291\u001b[0m         .mockResolvedValueOnce(mockInvocationResponse as any);\n    \u001b[7m   \u001b[0m \u001b[91m                               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96mtests/handlers/ssm/SsmServerHandler.test.ts\u001b[0m:\u001b[93m304\u001b[0m:\u001b[93m41\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type 'any' is not assignable to parameter of type 'never'.\n\n    \u001b[7m304\u001b[0m       mockClient.send.mockRejectedValue(new Error('System info unavailable') as any);\n    \u001b[7m   \u001b[0m \u001b[91m                                        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96mtests/handlers/ssm/SsmServerHandler.test.ts\u001b[0m:\u001b[93m333\u001b[0m:\u001b[93m32\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type 'any' is not assignable to parameter of type 'never'.\n\n    \u001b[7m333\u001b[0m         .mockResolvedValueOnce(mockSendResponse as any)\n    \u001b[7m   \u001b[0m \u001b[91m                               ~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96mtests/handlers/ssm/SsmServerHandler.test.ts\u001b[0m:\u001b[93m334\u001b[0m:\u001b[93m32\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type 'any' is not assignable to parameter of type 'never'.\n\n    \u001b[7m334\u001b[0m         .mockResolvedValueOnce(mockInvocationResponse as any);\n    \u001b[7m   \u001b[0m \u001b[91m                               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96mtests/handlers/ssm/SsmServerHandler.test.ts\u001b[0m:\u001b[93m336\u001b[0m:\u001b[93m39\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'getFileContent' does not exist on type 'SsmServerHandler'.\n\n    \u001b[7m336\u001b[0m       const result = await ssmHandler.getFileContent('/tmp/test.txt');\n    \u001b[7m   \u001b[0m \u001b[91m                                      ~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96mtests/handlers/ssm/SsmServerHandler.test.ts\u001b[0m:\u001b[93m347\u001b[0m:\u001b[93m41\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type 'any' is not assignable to parameter of type 'never'.\n\n    \u001b[7m347\u001b[0m       mockClient.send.mockRejectedValue(new Error('Permission denied') as any);\n    \u001b[7m   \u001b[0m \u001b[91m                                        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96mtests/handlers/ssm/SsmServerHandler.test.ts\u001b[0m:\u001b[93m349\u001b[0m:\u001b[93m39\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'getFileContent' does not exist on type 'SsmServerHandler'.\n\n    \u001b[7m349\u001b[0m       const result = await ssmHandler.getFileContent('/root/secret.txt');\n    \u001b[7m   \u001b[0m \u001b[91m                                      ~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96mtests/handlers/ssm/SsmServerHandler.test.ts\u001b[0m:\u001b[93m362\u001b[0m:\u001b[93m41\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type 'any' is not assignable to parameter of type 'never'.\n\n    \u001b[7m362\u001b[0m       mockClient.send.mockRejectedValue(new Error('Network error') as any);\n    \u001b[7m   \u001b[0m \u001b[91m                                        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96mtests/handlers/ssm/SsmServerHandler.test.ts\u001b[0m:\u001b[93m366\u001b[0m:\u001b[93m21\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'success' does not exist on type 'ExecutionResult'.\n\n    \u001b[7m366\u001b[0m       expect(result.success).toBe(false);\n    \u001b[7m   \u001b[0m \u001b[91m                    ~~~~~~~\u001b[0m\n    \u001b[96mtests/handlers/ssm/SsmServerHandler.test.ts\u001b[0m:\u001b[93m372\u001b[0m:\u001b[93m41\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type 'any' is not assignable to parameter of type 'never'.\n\n    \u001b[7m372\u001b[0m       mockClient.send.mockRejectedValue(new Error('Command failed') as any);\n    \u001b[7m   \u001b[0m \u001b[91m                                        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96mtests/handlers/ssm/SsmServerHandler.test.ts\u001b[0m:\u001b[93m376\u001b[0m:\u001b[93m21\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'success' does not exist on type 'ExecutionResult'.\n\n    \u001b[7m376\u001b[0m       expect(result.success).toBe(false);\n    \u001b[7m   \u001b[0m \u001b[91m                    ~~~~~~~\u001b[0m\n","name":"/home/chatgpt/gpt-terminal-plus/tests/handlers/ssm/SsmServerHandler.test.ts","startTime":1755557566821,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1755557566821,"message":"  ● Test suite failed to run\n\n    \u001b[96mtests/handlers/local/LocalServerHandler.comprehensive.test.ts\u001b[0m:\u001b[93m44\u001b[0m:\u001b[93m13\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2741: \u001b[0mProperty 'code' is missing in type '{ protocol: \"local\"; hostname: string; }' but required in type 'LocalServerConfig'.\n\n    \u001b[7m44\u001b[0m       const minimalConfig: LocalServerConfig = {\n    \u001b[7m  \u001b[0m \u001b[91m            ~~~~~~~~~~~~~\u001b[0m\n\n      \u001b[96msrc/types/ServerConfig.ts\u001b[0m:\u001b[93m16\u001b[0m:\u001b[93m5\u001b[0m\n        \u001b[7m16\u001b[0m     code: boolean; // Required for local servers\n        \u001b[7m  \u001b[0m \u001b[96m    ~~~~\u001b[0m\n        'code' is declared here.\n    \u001b[96mtests/handlers/local/LocalServerHandler.comprehensive.test.ts\u001b[0m:\u001b[93m78\u001b[0m:\u001b[93m13\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2741: \u001b[0mProperty 'code' is missing in type '{ protocol: \"local\"; hostname: string; }' but required in type 'LocalServerConfig'.\n\n    \u001b[7m78\u001b[0m       const configWithoutCode: LocalServerConfig = {\n    \u001b[7m  \u001b[0m \u001b[91m            ~~~~~~~~~~~~~~~~~\u001b[0m\n\n      \u001b[96msrc/types/ServerConfig.ts\u001b[0m:\u001b[93m16\u001b[0m:\u001b[93m5\u001b[0m\n        \u001b[7m16\u001b[0m     code: boolean; // Required for local servers\n        \u001b[7m  \u001b[0m \u001b[96m    ~~~~\u001b[0m\n        'code' is declared here.\n    \u001b[96mtests/handlers/local/LocalServerHandler.comprehensive.test.ts\u001b[0m:\u001b[93m98\u001b[0m:\u001b[93m58\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type '{ success: boolean; output: string; error: string; exitCode: number; }' is not assignable to parameter of type '{ stdout: string; stderr: string; } | Promise<{ stdout: string; stderr: string; }>'.\n\n    \u001b[7m98\u001b[0m       mockExecuteCode.executeLocalCode.mockResolvedValue(mockResult);\n    \u001b[7m  \u001b[0m \u001b[91m                                                         ~~~~~~~~~~\u001b[0m\n    \u001b[96mtests/handlers/local/LocalServerHandler.comprehensive.test.ts\u001b[0m:\u001b[93m119\u001b[0m:\u001b[93m58\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type '{ success: boolean; output: string; error: string; exitCode: number; }' is not assignable to parameter of type '{ stdout: string; stderr: string; } | Promise<{ stdout: string; stderr: string; }>'.\n\n    \u001b[7m119\u001b[0m       mockExecuteCode.executeLocalCode.mockResolvedValue(mockResult);\n    \u001b[7m   \u001b[0m \u001b[91m                                                         ~~~~~~~~~~\u001b[0m\n    \u001b[96mtests/handlers/local/LocalServerHandler.comprehensive.test.ts\u001b[0m:\u001b[93m140\u001b[0m:\u001b[93m58\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type '{ success: boolean; output: string; error: string; exitCode: number; }' is not assignable to parameter of type '{ stdout: string; stderr: string; } | Promise<{ stdout: string; stderr: string; }>'.\n\n    \u001b[7m140\u001b[0m       mockExecuteCode.executeLocalCode.mockResolvedValue(mockResult);\n    \u001b[7m   \u001b[0m \u001b[91m                                                         ~~~~~~~~~~\u001b[0m\n    \u001b[96mtests/handlers/local/LocalServerHandler.comprehensive.test.ts\u001b[0m:\u001b[93m161\u001b[0m:\u001b[93m58\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type '{ success: boolean; output: string; error: string; exitCode: number; }' is not assignable to parameter of type '{ stdout: string; stderr: string; } | Promise<{ stdout: string; stderr: string; }>'.\n\n    \u001b[7m161\u001b[0m       mockExecuteCode.executeLocalCode.mockResolvedValue(mockResult);\n    \u001b[7m   \u001b[0m \u001b[91m                                                         ~~~~~~~~~~\u001b[0m\n    \u001b[96mtests/handlers/local/LocalServerHandler.comprehensive.test.ts\u001b[0m:\u001b[93m192\u001b[0m:\u001b[93m58\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type '{ success: boolean; output: string; error: string; exitCode: number; }' is not assignable to parameter of type '{ stdout: string; stderr: string; } | Promise<{ stdout: string; stderr: string; }>'.\n\n    \u001b[7m192\u001b[0m       mockExecuteCode.executeLocalCode.mockResolvedValue(mockResult);\n    \u001b[7m   \u001b[0m \u001b[91m                                                         ~~~~~~~~~~\u001b[0m\n    \u001b[96mtests/handlers/local/LocalServerHandler.comprehensive.test.ts\u001b[0m:\u001b[93m213\u001b[0m:\u001b[93m58\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type '{ success: boolean; output: string; error: string; exitCode: number; }' is not assignable to parameter of type '{ stdout: string; stderr: string; } | Promise<{ stdout: string; stderr: string; }>'.\n\n    \u001b[7m213\u001b[0m       mockExecuteCode.executeLocalCode.mockResolvedValue(mockResult);\n    \u001b[7m   \u001b[0m \u001b[91m                                                         ~~~~~~~~~~\u001b[0m\n    \u001b[96mtests/handlers/local/LocalServerHandler.comprehensive.test.ts\u001b[0m:\u001b[93m394\u001b[0m:\u001b[93m64\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type '{ protocol: \"local\"; hostname: string; }' is not assignable to parameter of type 'LocalServerConfig'.\n      Property 'code' is missing in type '{ protocol: \"local\"; hostname: string; }' but required in type 'LocalServerConfig'.\n\n    \u001b[7m394\u001b[0m       const handlerWithoutPostCommand = new LocalServerHandler({\n    \u001b[7m   \u001b[0m \u001b[91m                                                               ~\u001b[0m\n    \u001b[7m395\u001b[0m         protocol: 'local',\n    \u001b[7m   \u001b[0m \u001b[91m~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[7m396\u001b[0m         hostname: 'localhost'\n    \u001b[7m   \u001b[0m \u001b[91m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[7m397\u001b[0m       });\n    \u001b[7m   \u001b[0m \u001b[91m~~~~~~~\u001b[0m\n\n      \u001b[96msrc/types/ServerConfig.ts\u001b[0m:\u001b[93m16\u001b[0m:\u001b[93m5\u001b[0m\n        \u001b[7m16\u001b[0m     code: boolean; // Required for local servers\n        \u001b[7m  \u001b[0m \u001b[96m    ~~~~\u001b[0m\n        'code' is declared here.\n    \u001b[96mtests/handlers/local/LocalServerHandler.comprehensive.test.ts\u001b[0m:\u001b[93m412\u001b[0m:\u001b[93m26\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2349: \u001b[0mThis expression is not callable.\n      Type 'ObjectEncodingOptions & ExecOptions' has no call signatures.\n\n    \u001b[7m412\u001b[0m         setTimeout(() => callback!(null, 'Post-command output', ''), 0);\n    \u001b[7m   \u001b[0m \u001b[91m                         ~~~~~~~~~\u001b[0m\n    \u001b[96mtests/handlers/local/LocalServerHandler.comprehensive.test.ts\u001b[0m:\u001b[93m433\u001b[0m:\u001b[93m26\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2349: \u001b[0mThis expression is not callable.\n      Type 'ObjectEncodingOptions & ExecOptions' has no call signatures.\n\n    \u001b[7m433\u001b[0m         setTimeout(() => callback!(mockError, '', 'Error output'), 0);\n    \u001b[7m   \u001b[0m \u001b[91m                         ~~~~~~~~~\u001b[0m\n    \u001b[96mtests/handlers/local/LocalServerHandler.comprehensive.test.ts\u001b[0m:\u001b[93m523\u001b[0m:\u001b[93m9\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2353: \u001b[0mObject literal may only specify known properties, and 'success' does not exist in type '{ stdout: string; stderr: string; } | Promise<{ stdout: string; stderr: string; }>'.\n\n    \u001b[7m523\u001b[0m         success: true,\n    \u001b[7m   \u001b[0m \u001b[91m        ~~~~~~~\u001b[0m\n    \u001b[96mtests/handlers/local/LocalServerHandler.comprehensive.test.ts\u001b[0m:\u001b[93m536\u001b[0m:\u001b[93m25\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'success' does not exist on type 'ExecutionResult'.\n\n    \u001b[7m536\u001b[0m       expect(execResult.success).toBe(true);\n    \u001b[7m   \u001b[0m \u001b[91m                        ~~~~~~~\u001b[0m\n    \u001b[96mtests/handlers/local/LocalServerHandler.comprehensive.test.ts\u001b[0m:\u001b[93m568\u001b[0m:\u001b[93m26\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2349: \u001b[0mThis expression is not callable.\n      Type 'ObjectEncodingOptions & ExecOptions' has no call signatures.\n\n    \u001b[7m568\u001b[0m         setTimeout(() => callback!(null, 'Success', ''), 0);\n    \u001b[7m   \u001b[0m \u001b[91m                         ~~~~~~~~~\u001b[0m\n    \u001b[96mtests/handlers/local/LocalServerHandler.comprehensive.test.ts\u001b[0m:\u001b[93m579\u001b[0m:\u001b[93m26\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2349: \u001b[0mThis expression is not callable.\n      Type 'ObjectEncodingOptions & ExecOptions' has no call signatures.\n\n    \u001b[7m579\u001b[0m         setTimeout(() => callback!(mockError, '', 'Error'), 0);\n    \u001b[7m   \u001b[0m \u001b[91m                         ~~~~~~~~~\u001b[0m\n","name":"/home/chatgpt/gpt-terminal-plus/tests/handlers/local/LocalServerHandler.comprehensive.test.ts","startTime":1755557566821,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1755557566821,"message":"  ● Test suite failed to run\n\n    \u001b[96mtests/managers/SSHConnectionManager.comprehensive.test.ts\u001b[0m:\u001b[93m57\u001b[0m:\u001b[93m13\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2367: \u001b[0mThis comparison appears to be unintentional because the types '\"unix connection\"' and '\"ready\"' have no overlap.\n\n    \u001b[7m57\u001b[0m         if (event === 'ready') {\n    \u001b[7m  \u001b[0m \u001b[91m            ~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96mtests/managers/SSHConnectionManager.comprehensive.test.ts\u001b[0m:\u001b[93m58\u001b[0m:\u001b[93m28\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2554: \u001b[0mExpected 3 arguments, but got 0.\n\n    \u001b[7m58\u001b[0m           setTimeout(() => callback(), 0);\n    \u001b[7m  \u001b[0m \u001b[91m                           ~~~~~~~~\u001b[0m\n\n      \u001b[96mnode_modules/@types/ssh2/index.d.ts\u001b[0m:\u001b[93m439\u001b[0m:\u001b[93m20\u001b[0m\n        \u001b[7m439\u001b[0m         listener: (info: UNIXConnectionDetails, accept: AcceptConnection, reject: RejectConnection) => void,\n        \u001b[7m   \u001b[0m \u001b[96m                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n        An argument for 'info' was not provided.\n    \u001b[96mtests/managers/SSHConnectionManager.comprehensive.test.ts\u001b[0m:\u001b[93m88\u001b[0m:\u001b[93m13\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2367: \u001b[0mThis comparison appears to be unintentional because the types '\"unix connection\"' and '\"ready\"' have no overlap.\n\n    \u001b[7m88\u001b[0m         if (event === 'ready') {\n    \u001b[7m  \u001b[0m \u001b[91m            ~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96mtests/managers/SSHConnectionManager.comprehensive.test.ts\u001b[0m:\u001b[93m89\u001b[0m:\u001b[93m28\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2554: \u001b[0mExpected 3 arguments, but got 0.\n\n    \u001b[7m89\u001b[0m           setTimeout(() => callback(), 0);\n    \u001b[7m  \u001b[0m \u001b[91m                           ~~~~~~~~\u001b[0m\n\n      \u001b[96mnode_modules/@types/ssh2/index.d.ts\u001b[0m:\u001b[93m439\u001b[0m:\u001b[93m20\u001b[0m\n        \u001b[7m439\u001b[0m         listener: (info: UNIXConnectionDetails, accept: AcceptConnection, reject: RejectConnection) => void,\n        \u001b[7m   \u001b[0m \u001b[96m                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n        An argument for 'info' was not provided.\n    \u001b[96mtests/managers/SSHConnectionManager.comprehensive.test.ts\u001b[0m:\u001b[93m107\u001b[0m:\u001b[93m13\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2367: \u001b[0mThis comparison appears to be unintentional because the types '\"unix connection\"' and '\"error\"' have no overlap.\n\n    \u001b[7m107\u001b[0m         if (event === 'error') {\n    \u001b[7m   \u001b[0m \u001b[91m            ~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96mtests/managers/SSHConnectionManager.comprehensive.test.ts\u001b[0m:\u001b[93m108\u001b[0m:\u001b[93m28\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2554: \u001b[0mExpected 3 arguments, but got 1.\n\n    \u001b[7m108\u001b[0m           setTimeout(() => callback(connectionError), 0);\n    \u001b[7m   \u001b[0m \u001b[91m                           ~~~~~~~~\u001b[0m\n\n      \u001b[96mnode_modules/@types/ssh2/index.d.ts\u001b[0m:\u001b[93m439\u001b[0m:\u001b[93m49\u001b[0m\n        \u001b[7m439\u001b[0m         listener: (info: UNIXConnectionDetails, accept: AcceptConnection, reject: RejectConnection) => void,\n        \u001b[7m   \u001b[0m \u001b[96m                                                ~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n        An argument for 'accept' was not provided.\n    \u001b[96mtests/managers/SSHConnectionManager.comprehensive.test.ts\u001b[0m:\u001b[93m133\u001b[0m:\u001b[93m13\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2367: \u001b[0mThis comparison appears to be unintentional because the types '\"unix connection\"' and '\"ready\"' have no overlap.\n\n    \u001b[7m133\u001b[0m         if (event === 'ready') {\n    \u001b[7m   \u001b[0m \u001b[91m            ~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96mtests/managers/SSHConnectionManager.comprehensive.test.ts\u001b[0m:\u001b[93m134\u001b[0m:\u001b[93m28\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2554: \u001b[0mExpected 3 arguments, but got 0.\n\n    \u001b[7m134\u001b[0m           setTimeout(() => callback(), 0);\n    \u001b[7m   \u001b[0m \u001b[91m                           ~~~~~~~~\u001b[0m\n\n      \u001b[96mnode_modules/@types/ssh2/index.d.ts\u001b[0m:\u001b[93m439\u001b[0m:\u001b[93m20\u001b[0m\n        \u001b[7m439\u001b[0m         listener: (info: UNIXConnectionDetails, accept: AcceptConnection, reject: RejectConnection) => void,\n        \u001b[7m   \u001b[0m \u001b[96m                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n        An argument for 'info' was not provided.\n    \u001b[96mtests/managers/SSHConnectionManager.comprehensive.test.ts\u001b[0m:\u001b[93m158\u001b[0m:\u001b[93m13\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2367: \u001b[0mThis comparison appears to be unintentional because the types '\"unix connection\"' and '\"ready\"' have no overlap.\n\n    \u001b[7m158\u001b[0m         if (event === 'ready') {\n    \u001b[7m   \u001b[0m \u001b[91m            ~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96mtests/managers/SSHConnectionManager.comprehensive.test.ts\u001b[0m:\u001b[93m159\u001b[0m:\u001b[93m28\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2554: \u001b[0mExpected 3 arguments, but got 0.\n\n    \u001b[7m159\u001b[0m           setTimeout(() => callback(), 0);\n    \u001b[7m   \u001b[0m \u001b[91m                           ~~~~~~~~\u001b[0m\n\n      \u001b[96mnode_modules/@types/ssh2/index.d.ts\u001b[0m:\u001b[93m439\u001b[0m:\u001b[93m20\u001b[0m\n        \u001b[7m439\u001b[0m         listener: (info: UNIXConnectionDetails, accept: AcceptConnection, reject: RejectConnection) => void,\n        \u001b[7m   \u001b[0m \u001b[96m                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n        An argument for 'info' was not provided.\n    \u001b[96mtests/managers/SSHConnectionManager.comprehensive.test.ts\u001b[0m:\u001b[93m186\u001b[0m:\u001b[93m35\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type 'null' is not assignable to parameter of type 'Error | undefined'.\n\n    \u001b[7m186\u001b[0m         setTimeout(() => callback(null, mockStream as any), 0);\n    \u001b[7m   \u001b[0m \u001b[91m                                  ~~~~\u001b[0m\n    \u001b[96mtests/managers/SSHConnectionManager.comprehensive.test.ts\u001b[0m:\u001b[93m225\u001b[0m:\u001b[93m35\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type 'null' is not assignable to parameter of type 'Error | undefined'.\n\n    \u001b[7m225\u001b[0m         setTimeout(() => callback(null, mockStream as any), 0);\n    \u001b[7m   \u001b[0m \u001b[91m                                  ~~~~\u001b[0m\n    \u001b[96mtests/managers/SSHConnectionManager.comprehensive.test.ts\u001b[0m:\u001b[93m257\u001b[0m:\u001b[93m46\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type 'null' is not assignable to parameter of type 'ClientChannel'.\n\n    \u001b[7m257\u001b[0m         setTimeout(() => callback(execError, null), 0);\n    \u001b[7m   \u001b[0m \u001b[91m                                             ~~~~\u001b[0m\n    \u001b[96mtests/managers/SSHConnectionManager.comprehensive.test.ts\u001b[0m:\u001b[93m274\u001b[0m:\u001b[93m35\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type 'null' is not assignable to parameter of type 'Error | undefined'.\n\n    \u001b[7m274\u001b[0m         setTimeout(() => callback(null, mockStream as any), 0);\n    \u001b[7m   \u001b[0m \u001b[91m                                  ~~~~\u001b[0m\n    \u001b[96mtests/managers/SSHConnectionManager.comprehensive.test.ts\u001b[0m:\u001b[93m307\u001b[0m:\u001b[93m35\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type 'null' is not assignable to parameter of type 'Error | undefined'.\n\n    \u001b[7m307\u001b[0m         setTimeout(() => callback(null, mockStream as any), 0);\n    \u001b[7m   \u001b[0m \u001b[91m                                  ~~~~\u001b[0m\n    \u001b[96mtests/managers/SSHConnectionManager.comprehensive.test.ts\u001b[0m:\u001b[93m348\u001b[0m:\u001b[93m35\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type 'null' is not assignable to parameter of type 'Error | undefined'.\n\n    \u001b[7m348\u001b[0m         setTimeout(() => callback(null, mockStream as any), 0);\n    \u001b[7m   \u001b[0m \u001b[91m                                  ~~~~\u001b[0m\n    \u001b[96mtests/managers/SSHConnectionManager.comprehensive.test.ts\u001b[0m:\u001b[93m399\u001b[0m:\u001b[93m13\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2367: \u001b[0mThis comparison appears to be unintentional because the types '\"unix connection\"' and '\"ready\"' have no overlap.\n\n    \u001b[7m399\u001b[0m         if (event === 'ready') {\n    \u001b[7m   \u001b[0m \u001b[91m            ~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96mtests/managers/SSHConnectionManager.comprehensive.test.ts\u001b[0m:\u001b[93m400\u001b[0m:\u001b[93m28\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2554: \u001b[0mExpected 3 arguments, but got 0.\n\n    \u001b[7m400\u001b[0m           setTimeout(() => callback(), 0);\n    \u001b[7m   \u001b[0m \u001b[91m                           ~~~~~~~~\u001b[0m\n\n      \u001b[96mnode_modules/@types/ssh2/index.d.ts\u001b[0m:\u001b[93m439\u001b[0m:\u001b[93m20\u001b[0m\n        \u001b[7m439\u001b[0m         listener: (info: UNIXConnectionDetails, accept: AcceptConnection, reject: RejectConnection) => void,\n        \u001b[7m   \u001b[0m \u001b[96m                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n        An argument for 'info' was not provided.\n    \u001b[96mtests/managers/SSHConnectionManager.comprehensive.test.ts\u001b[0m:\u001b[93m415\u001b[0m:\u001b[93m35\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type 'null' is not assignable to parameter of type 'Error | undefined'.\n\n    \u001b[7m415\u001b[0m         setTimeout(() => callback(null, mockStream as any), 0);\n    \u001b[7m   \u001b[0m \u001b[91m                                  ~~~~\u001b[0m\n","name":"/home/chatgpt/gpt-terminal-plus/tests/managers/SSHConnectionManager.comprehensive.test.ts","startTime":1755557566821,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1755557566821,"message":"  ● Test suite failed to run\n\n    \u001b[96msrc/config/convictConfig.ts\u001b[0m:\u001b[93m268\u001b[0m:\u001b[93m2\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m268\u001b[0m \\n/**\\n * Return the full runtime settings with sensitive keys redacted.\\n */\\nexport function getFullSettings(): Record<string, unknown> {\\n  const cfg = convictConfig();\\n  cfg.validate({ allowed: \"warn\" });\\n\\n  const raw = cfg.getProperties();\\n\\n  function redact(obj: any): any {\\n    if (typeof obj !== \"object\" || obj === null) return obj;\\n    return Object.fromEntries(\\n      Object.entries(obj).map(([k, v]) => {\\n        if (/key|token|secret|password/i.test(k)) {\\n          return [k, typeof v === \"string\" && v.length > 0 ? \"*****\" : \"\"];\\n        }\\n        return [k, redact(v)];\\n      })\\n    );\\n  }\\n\\n  return redact(raw);\\n}\n    \u001b[7m   \u001b[0m \u001b[91m ~\u001b[0m\n    \u001b[96msrc/config/convictConfig.ts\u001b[0m:\u001b[93m268\u001b[0m:\u001b[93m79\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2552: \u001b[0mCannot find name 'nexport'. Did you mean 'exports'?\n\n    \u001b[7m268\u001b[0m \\n/**\\n * Return the full runtime settings with sensitive keys redacted.\\n */\\nexport function getFullSettings(): Record<string, unknown> {\\n  const cfg = convictConfig();\\n  cfg.validate({ allowed: \"warn\" });\\n\\n  const raw = cfg.getProperties();\\n\\n  function redact(obj: any): any {\\n    if (typeof obj !== \"object\" || obj === null) return obj;\\n    return Object.fromEntries(\\n      Object.entries(obj).map(([k, v]) => {\\n        if (/key|token|secret|password/i.test(k)) {\\n          return [k, typeof v === \"string\" && v.length > 0 ? \"*****\" : \"\"];\\n        }\\n        return [k, redact(v)];\\n      })\\n    );\\n  }\\n\\n  return redact(raw);\\n}\n    \u001b[7m   \u001b[0m \u001b[91m                                                                              ~~~~~~~\u001b[0m\n\n      \u001b[96mnode_modules/@types/node/globals.d.ts\u001b[0m:\u001b[93m169\u001b[0m:\u001b[93m9\u001b[0m\n        \u001b[7m169\u001b[0m     var exports: any;\n        \u001b[7m   \u001b[0m \u001b[96m        ~~~~~~~\u001b[0m\n        'exports' is declared here.\n    \u001b[96msrc/config/convictConfig.ts\u001b[0m:\u001b[93m268\u001b[0m:\u001b[93m141\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m268\u001b[0m \\n/**\\n * Return the full runtime settings with sensitive keys redacted.\\n */\\nexport function getFullSettings(): Record<string, unknown> {\\n  const cfg = convictConfig();\\n  cfg.validate({ allowed: \"warn\" });\\n\\n  const raw = cfg.getProperties();\\n\\n  function redact(obj: any): any {\\n    if (typeof obj !== \"object\" || obj === null) return obj;\\n    return Object.fromEntries(\\n      Object.entries(obj).map(([k, v]) => {\\n        if (/key|token|secret|password/i.test(k)) {\\n          return [k, typeof v === \"string\" && v.length > 0 ? \"*****\" : \"\"];\\n        }\\n        return [k, redact(v)];\\n      })\\n    );\\n  }\\n\\n  return redact(raw);\\n}\n    \u001b[7m   \u001b[0m \u001b[91m                                                                                                                                            ~\u001b[0m\n    \u001b[96msrc/config/convictConfig.ts\u001b[0m:\u001b[93m268\u001b[0m:\u001b[93m173\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m268\u001b[0m \\n/**\\n * Return the full runtime settings with sensitive keys redacted.\\n */\\nexport function getFullSettings(): Record<string, unknown> {\\n  const cfg = convictConfig();\\n  cfg.validate({ allowed: \"warn\" });\\n\\n  const raw = cfg.getProperties();\\n\\n  function redact(obj: any): any {\\n    if (typeof obj !== \"object\" || obj === null) return obj;\\n    return Object.fromEntries(\\n      Object.entries(obj).map(([k, v]) => {\\n        if (/key|token|secret|password/i.test(k)) {\\n          return [k, typeof v === \"string\" && v.length > 0 ? \"*****\" : \"\"];\\n        }\\n        return [k, redact(v)];\\n      })\\n    );\\n  }\\n\\n  return redact(raw);\\n}\n    \u001b[7m   \u001b[0m \u001b[91m                                                                                                                                                                            ~\u001b[0m\n    \u001b[96msrc/config/convictConfig.ts\u001b[0m:\u001b[93m268\u001b[0m:\u001b[93m211\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m268\u001b[0m \\n/**\\n * Return the full runtime settings with sensitive keys redacted.\\n */\\nexport function getFullSettings(): Record<string, unknown> {\\n  const cfg = convictConfig();\\n  cfg.validate({ allowed: \"warn\" });\\n\\n  const raw = cfg.getProperties();\\n\\n  function redact(obj: any): any {\\n    if (typeof obj !== \"object\" || obj === null) return obj;\\n    return Object.fromEntries(\\n      Object.entries(obj).map(([k, v]) => {\\n        if (/key|token|secret|password/i.test(k)) {\\n          return [k, typeof v === \"string\" && v.length > 0 ? \"*****\" : \"\"];\\n        }\\n        return [k, redact(v)];\\n      })\\n    );\\n  }\\n\\n  return redact(raw);\\n}\n    \u001b[7m   \u001b[0m \u001b[91m                                                                                                                                                                                                                  ~\u001b[0m\n    \u001b[96msrc/config/convictConfig.ts\u001b[0m:\u001b[93m268\u001b[0m:\u001b[93m213\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m268\u001b[0m \\n/**\\n * Return the full runtime settings with sensitive keys redacted.\\n */\\nexport function getFullSettings(): Record<string, unknown> {\\n  const cfg = convictConfig();\\n  cfg.validate({ allowed: \"warn\" });\\n\\n  const raw = cfg.getProperties();\\n\\n  function redact(obj: any): any {\\n    if (typeof obj !== \"object\" || obj === null) return obj;\\n    return Object.fromEntries(\\n      Object.entries(obj).map(([k, v]) => {\\n        if (/key|token|secret|password/i.test(k)) {\\n          return [k, typeof v === \"string\" && v.length > 0 ? \"*****\" : \"\"];\\n        }\\n        return [k, redact(v)];\\n      })\\n    );\\n  }\\n\\n  return redact(raw);\\n}\n    \u001b[7m   \u001b[0m \u001b[91m                                                                                                                                                                                                                    ~\u001b[0m\n    \u001b[96msrc/config/convictConfig.ts\u001b[0m:\u001b[93m268\u001b[0m:\u001b[93m249\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m268\u001b[0m \\n/**\\n * Return the full runtime settings with sensitive keys redacted.\\n */\\nexport function getFullSettings(): Record<string, unknown> {\\n  const cfg = convictConfig();\\n  cfg.validate({ allowed: \"warn\" });\\n\\n  const raw = cfg.getProperties();\\n\\n  function redact(obj: any): any {\\n    if (typeof obj !== \"object\" || obj === null) return obj;\\n    return Object.fromEntries(\\n      Object.entries(obj).map(([k, v]) => {\\n        if (/key|token|secret|password/i.test(k)) {\\n          return [k, typeof v === \"string\" && v.length > 0 ? \"*****\" : \"\"];\\n        }\\n        return [k, redact(v)];\\n      })\\n    );\\n  }\\n\\n  return redact(raw);\\n}\n    \u001b[7m   \u001b[0m \u001b[91m                                                                                                                                                                                                                                                        ~\u001b[0m\n    \u001b[96msrc/config/convictConfig.ts\u001b[0m:\u001b[93m268\u001b[0m:\u001b[93m251\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m268\u001b[0m \\n/**\\n * Return the full runtime settings with sensitive keys redacted.\\n */\\nexport function getFullSettings(): Record<string, unknown> {\\n  const cfg = convictConfig();\\n  cfg.validate({ allowed: \"warn\" });\\n\\n  const raw = cfg.getProperties();\\n\\n  function redact(obj: any): any {\\n    if (typeof obj !== \"object\" || obj === null) return obj;\\n    return Object.fromEntries(\\n      Object.entries(obj).map(([k, v]) => {\\n        if (/key|token|secret|password/i.test(k)) {\\n          return [k, typeof v === \"string\" && v.length > 0 ? \"*****\" : \"\"];\\n        }\\n        return [k, redact(v)];\\n      })\\n    );\\n  }\\n\\n  return redact(raw);\\n}\n    \u001b[7m   \u001b[0m \u001b[91m                                                                                                                                                                                                                                                          ~\u001b[0m\n    \u001b[96msrc/config/convictConfig.ts\u001b[0m:\u001b[93m268\u001b[0m:\u001b[93m287\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m268\u001b[0m \\n/**\\n * Return the full runtime settings with sensitive keys redacted.\\n */\\nexport function getFullSettings(): Record<string, unknown> {\\n  const cfg = convictConfig();\\n  cfg.validate({ allowed: \"warn\" });\\n\\n  const raw = cfg.getProperties();\\n\\n  function redact(obj: any): any {\\n    if (typeof obj !== \"object\" || obj === null) return obj;\\n    return Object.fromEntries(\\n      Object.entries(obj).map(([k, v]) => {\\n        if (/key|token|secret|password/i.test(k)) {\\n          return [k, typeof v === \"string\" && v.length > 0 ? \"*****\" : \"\"];\\n        }\\n        return [k, redact(v)];\\n      })\\n    );\\n  }\\n\\n  return redact(raw);\\n}\n    \u001b[7m   \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                              ~\u001b[0m\n    \u001b[96msrc/config/convictConfig.ts\u001b[0m:\u001b[93m268\u001b[0m:\u001b[93m349\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m268\u001b[0m \\n/**\\n * Return the full runtime settings with sensitive keys redacted.\\n */\\nexport function getFullSettings(): Record<string, unknown> {\\n  const cfg = convictConfig();\\n  cfg.validate({ allowed: \"warn\" });\\n\\n  const raw = cfg.getProperties();\\n\\n  function redact(obj: any): any {\\n    if (typeof obj !== \"object\" || obj === null) return obj;\\n    return Object.fromEntries(\\n      Object.entries(obj).map(([k, v]) => {\\n        if (/key|token|secret|password/i.test(k)) {\\n          return [k, typeof v === \"string\" && v.length > 0 ? \"*****\" : \"\"];\\n        }\\n        return [k, redact(v)];\\n      })\\n    );\\n  }\\n\\n  return redact(raw);\\n}\n    \u001b[7m   \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                                                                                            ~\u001b[0m\n    \u001b[96msrc/config/convictConfig.ts\u001b[0m:\u001b[93m268\u001b[0m:\u001b[93m381\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m268\u001b[0m \\n/**\\n * Return the full runtime settings with sensitive keys redacted.\\n */\\nexport function getFullSettings(): Record<string, unknown> {\\n  const cfg = convictConfig();\\n  cfg.validate({ allowed: \"warn\" });\\n\\n  const raw = cfg.getProperties();\\n\\n  function redact(obj: any): any {\\n    if (typeof obj !== \"object\" || obj === null) return obj;\\n    return Object.fromEntries(\\n      Object.entries(obj).map(([k, v]) => {\\n        if (/key|token|secret|password/i.test(k)) {\\n          return [k, typeof v === \"string\" && v.length > 0 ? \"*****\" : \"\"];\\n        }\\n        return [k, redact(v)];\\n      })\\n    );\\n  }\\n\\n  return redact(raw);\\n}\n    \u001b[7m   \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                                                                                                                            ~\u001b[0m\n    \u001b[96msrc/config/convictConfig.ts\u001b[0m:\u001b[93m268\u001b[0m:\u001b[93m388\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2554: \u001b[0mExpected 1 arguments, but got 3.\n\n    \u001b[7m268\u001b[0m \\n/**\\n * Return the full runtime settings with sensitive keys redacted.\\n */\\nexport function getFullSettings(): Record<string, unknown> {\\n  const cfg = convictConfig();\\n  cfg.validate({ allowed: \"warn\" });\\n\\n  const raw = cfg.getProperties();\\n\\n  function redact(obj: any): any {\\n    if (typeof obj !== \"object\" || obj === null) return obj;\\n    return Object.fromEntries(\\n      Object.entries(obj).map(([k, v]) => {\\n        if (/key|token|secret|password/i.test(k)) {\\n          return [k, typeof v === \"string\" && v.length > 0 ? \"*****\" : \"\"];\\n        }\\n        return [k, redact(v)];\\n      })\\n    );\\n  }\\n\\n  return redact(raw);\\n}\n    \u001b[7m   \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                                                                                                                                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/config/convictConfig.ts\u001b[0m:\u001b[93m268\u001b[0m:\u001b[93m426\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m268\u001b[0m \\n/**\\n * Return the full runtime settings with sensitive keys redacted.\\n */\\nexport function getFullSettings(): Record<string, unknown> {\\n  const cfg = convictConfig();\\n  cfg.validate({ allowed: \"warn\" });\\n\\n  const raw = cfg.getProperties();\\n\\n  function redact(obj: any): any {\\n    if (typeof obj !== \"object\" || obj === null) return obj;\\n    return Object.fromEntries(\\n      Object.entries(obj).map(([k, v]) => {\\n        if (/key|token|secret|password/i.test(k)) {\\n          return [k, typeof v === \"string\" && v.length > 0 ? \"*****\" : \"\"];\\n        }\\n        return [k, redact(v)];\\n      })\\n    );\\n  }\\n\\n  return redact(raw);\\n}\n    \u001b[7m   \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                                                                                                                                                                         ~\u001b[0m\n    \u001b[96msrc/config/convictConfig.ts\u001b[0m:\u001b[93m268\u001b[0m:\u001b[93m479\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m268\u001b[0m \\n/**\\n * Return the full runtime settings with sensitive keys redacted.\\n */\\nexport function getFullSettings(): Record<string, unknown> {\\n  const cfg = convictConfig();\\n  cfg.validate({ allowed: \"warn\" });\\n\\n  const raw = cfg.getProperties();\\n\\n  function redact(obj: any): any {\\n    if (typeof obj !== \"object\" || obj === null) return obj;\\n    return Object.fromEntries(\\n      Object.entries(obj).map(([k, v]) => {\\n        if (/key|token|secret|password/i.test(k)) {\\n          return [k, typeof v === \"string\" && v.length > 0 ? \"*****\" : \"\"];\\n        }\\n        return [k, redact(v)];\\n      })\\n    );\\n  }\\n\\n  return redact(raw);\\n}\n    \u001b[7m   \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              ~\u001b[0m\n    \u001b[96msrc/config/convictConfig.ts\u001b[0m:\u001b[93m268\u001b[0m:\u001b[93m556\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m268\u001b[0m \\n/**\\n * Return the full runtime settings with sensitive keys redacted.\\n */\\nexport function getFullSettings(): Record<string, unknown> {\\n  const cfg = convictConfig();\\n  cfg.validate({ allowed: \"warn\" });\\n\\n  const raw = cfg.getProperties();\\n\\n  function redact(obj: any): any {\\n    if (typeof obj !== \"object\" || obj === null) return obj;\\n    return Object.fromEntries(\\n      Object.entries(obj).map(([k, v]) => {\\n        if (/key|token|secret|password/i.test(k)) {\\n          return [k, typeof v === \"string\" && v.length > 0 ? \"*****\" : \"\"];\\n        }\\n        return [k, redact(v)];\\n      })\\n    );\\n  }\\n\\n  return redact(raw);\\n}\n    \u001b[7m   \u001b[0m \u001b[91m~\u001b[0m\n    \u001b[96msrc/config/convictConfig.ts\u001b[0m:\u001b[93m268\u001b[0m:\u001b[93m567\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m268\u001b[0m \\n/**\\n * Return the full runtime settings with sensitive keys redacted.\\n */\\nexport function getFullSettings(): Record<string, unknown> {\\n  const cfg = convictConfig();\\n  cfg.validate({ allowed: \"warn\" });\\n\\n  const raw = cfg.getProperties();\\n\\n  function redact(obj: any): any {\\n    if (typeof obj !== \"object\" || obj === null) return obj;\\n    return Object.fromEntries(\\n      Object.entries(obj).map(([k, v]) => {\\n        if (/key|token|secret|password/i.test(k)) {\\n          return [k, typeof v === \"string\" && v.length > 0 ? \"*****\" : \"\"];\\n        }\\n        return [k, redact(v)];\\n      })\\n    );\\n  }\\n\\n  return redact(raw);\\n}\n    \u001b[7m   \u001b[0m \u001b[91m~\u001b[0m\n    \u001b[96msrc/config/convictConfig.ts\u001b[0m:\u001b[93m268\u001b[0m:\u001b[93m599\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m268\u001b[0m \\n/**\\n * Return the full runtime settings with sensitive keys redacted.\\n */\\nexport function getFullSettings(): Record<string, unknown> {\\n  const cfg = convictConfig();\\n  cfg.validate({ allowed: \"warn\" });\\n\\n  const raw = cfg.getProperties();\\n\\n  function redact(obj: any): any {\\n    if (typeof obj !== \"object\" || obj === null) return obj;\\n    return Object.fromEntries(\\n      Object.entries(obj).map(([k, v]) => {\\n        if (/key|token|secret|password/i.test(k)) {\\n          return [k, typeof v === \"string\" && v.length > 0 ? \"*****\" : \"\"];\\n        }\\n        return [k, redact(v)];\\n      })\\n    );\\n  }\\n\\n  return redact(raw);\\n}\n    \u001b[7m   \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      ~\u001b[0m\n    \u001b[96msrc/config/convictConfig.ts\u001b[0m:\u001b[93m268\u001b[0m:\u001b[93m609\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m268\u001b[0m \\n/**\\n * Return the full runtime settings with sensitive keys redacted.\\n */\\nexport function getFullSettings(): Record<string, unknown> {\\n  const cfg = convictConfig();\\n  cfg.validate({ allowed: \"warn\" });\\n\\n  const raw = cfg.getProperties();\\n\\n  function redact(obj: any): any {\\n    if (typeof obj !== \"object\" || obj === null) return obj;\\n    return Object.fromEntries(\\n      Object.entries(obj).map(([k, v]) => {\\n        if (/key|token|secret|password/i.test(k)) {\\n          return [k, typeof v === \"string\" && v.length > 0 ? \"*****\" : \"\"];\\n        }\\n        return [k, redact(v)];\\n      })\\n    );\\n  }\\n\\n  return redact(raw);\\n}\n    \u001b[7m   \u001b[0m \u001b[91m~\u001b[0m\n    \u001b[96msrc/config/convictConfig.ts\u001b[0m:\u001b[93m268\u001b[0m:\u001b[93m617\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m268\u001b[0m \\n/**\\n * Return the full runtime settings with sensitive keys redacted.\\n */\\nexport function getFullSettings(): Record<string, unknown> {\\n  const cfg = convictConfig();\\n  cfg.validate({ allowed: \"warn\" });\\n\\n  const raw = cfg.getProperties();\\n\\n  function redact(obj: any): any {\\n    if (typeof obj !== \"object\" || obj === null) return obj;\\n    return Object.fromEntries(\\n      Object.entries(obj).map(([k, v]) => {\\n        if (/key|token|secret|password/i.test(k)) {\\n          return [k, typeof v === \"string\" && v.length > 0 ? \"*****\" : \"\"];\\n        }\\n        return [k, redact(v)];\\n      })\\n    );\\n  }\\n\\n  return redact(raw);\\n}\n    \u001b[7m   \u001b[0m \u001b[91m~\u001b[0m\n    \u001b[96msrc/config/convictConfig.ts\u001b[0m:\u001b[93m268\u001b[0m:\u001b[93m622\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m268\u001b[0m \\n/**\\n * Return the full runtime settings with sensitive keys redacted.\\n */\\nexport function getFullSettings(): Record<string, unknown> {\\n  const cfg = convictConfig();\\n  cfg.validate({ allowed: \"warn\" });\\n\\n  const raw = cfg.getProperties();\\n\\n  function redact(obj: any): any {\\n    if (typeof obj !== \"object\" || obj === null) return obj;\\n    return Object.fromEntries(\\n      Object.entries(obj).map(([k, v]) => {\\n        if (/key|token|secret|password/i.test(k)) {\\n          return [k, typeof v === \"string\" && v.length > 0 ? \"*****\" : \"\"];\\n        }\\n        return [k, redact(v)];\\n      })\\n    );\\n  }\\n\\n  return redact(raw);\\n}\n    \u001b[7m   \u001b[0m \u001b[91m~\u001b[0m\n    \u001b[96msrc/config/convictConfig.ts\u001b[0m:\u001b[93m268\u001b[0m:\u001b[93m624\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m268\u001b[0m \\n/**\\n * Return the full runtime settings with sensitive keys redacted.\\n */\\nexport function getFullSettings(): Record<string, unknown> {\\n  const cfg = convictConfig();\\n  cfg.validate({ allowed: \"warn\" });\\n\\n  const raw = cfg.getProperties();\\n\\n  function redact(obj: any): any {\\n    if (typeof obj !== \"object\" || obj === null) return obj;\\n    return Object.fromEntries(\\n      Object.entries(obj).map(([k, v]) => {\\n        if (/key|token|secret|password/i.test(k)) {\\n          return [k, typeof v === \"string\" && v.length > 0 ? \"*****\" : \"\"];\\n        }\\n        return [k, redact(v)];\\n      })\\n    );\\n  }\\n\\n  return redact(raw);\\n}\n    \u001b[7m   \u001b[0m \u001b[91m~\u001b[0m\n    \u001b[96msrc/config/convictConfig.ts\u001b[0m:\u001b[93m268\u001b[0m:\u001b[93m647\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m268\u001b[0m \\n/**\\n * Return the full runtime settings with sensitive keys redacted.\\n */\\nexport function getFullSettings(): Record<string, unknown> {\\n  const cfg = convictConfig();\\n  cfg.validate({ allowed: \"warn\" });\\n\\n  const raw = cfg.getProperties();\\n\\n  function redact(obj: any): any {\\n    if (typeof obj !== \"object\" || obj === null) return obj;\\n    return Object.fromEntries(\\n      Object.entries(obj).map(([k, v]) => {\\n        if (/key|token|secret|password/i.test(k)) {\\n          return [k, typeof v === \"string\" && v.length > 0 ? \"*****\" : \"\"];\\n        }\\n        return [k, redact(v)];\\n      })\\n    );\\n  }\\n\\n  return redact(raw);\\n}\n    \u001b[7m   \u001b[0m \u001b[91m~\u001b[0m\n    \u001b[96msrc/config/convictConfig.ts\u001b[0m:\u001b[93m268\u001b[0m:\u001b[93m1\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m268\u001b[0m \\n/**\\n * Return the full runtime settings with sensitive keys redacted.\\n */\\nexport function getFullSettings(): Record<string, unknown> {\\n  const cfg = convictConfig();\\n  cfg.validate({ allowed: \"warn\" });\\n\\n  const raw = cfg.getProperties();\\n\\n  function redact(obj: any): any {\\n    if (typeof obj !== \"object\" || obj === null) return obj;\\n    return Object.fromEntries(\\n      Object.entries(obj).map(([k, v]) => {\\n        if (/key|token|secret|password/i.test(k)) {\\n          return [k, typeof v === \"string\" && v.length > 0 ? \"*****\" : \"\"];\\n        }\\n        return [k, redact(v)];\\n      })\\n    );\\n  }\\n\\n  return redact(raw);\\n}\n    \u001b[7m   \u001b[0m \u001b[91m\u001b[0m\n    \u001b[96msrc/config/convictConfig.ts\u001b[0m:\u001b[93m268\u001b[0m:\u001b[93m78\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m268\u001b[0m \\n/**\\n * Return the full runtime settings with sensitive keys redacted.\\n */\\nexport function getFullSettings(): Record<string, unknown> {\\n  const cfg = convictConfig();\\n  cfg.validate({ allowed: \"warn\" });\\n\\n  const raw = cfg.getProperties();\\n\\n  function redact(obj: any): any {\\n    if (typeof obj !== \"object\" || obj === null) return obj;\\n    return Object.fromEntries(\\n      Object.entries(obj).map(([k, v]) => {\\n        if (/key|token|secret|password/i.test(k)) {\\n          return [k, typeof v === \"string\" && v.length > 0 ? \"*****\" : \"\"];\\n        }\\n        return [k, redact(v)];\\n      })\\n    );\\n  }\\n\\n  return redact(raw);\\n}\n    \u001b[7m   \u001b[0m \u001b[91m                                                                             \u001b[0m\n    \u001b[96msrc/config/convictConfig.ts\u001b[0m:\u001b[93m268\u001b[0m:\u001b[93m79\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1435: \u001b[0mUnknown keyword or identifier. Did you mean 'export'?\n\n    \u001b[7m268\u001b[0m \\n/**\\n * Return the full runtime settings with sensitive keys redacted.\\n */\\nexport function getFullSettings(): Record<string, unknown> {\\n  const cfg = convictConfig();\\n  cfg.validate({ allowed: \"warn\" });\\n\\n  const raw = cfg.getProperties();\\n\\n  function redact(obj: any): any {\\n    if (typeof obj !== \"object\" || obj === null) return obj;\\n    return Object.fromEntries(\\n      Object.entries(obj).map(([k, v]) => {\\n        if (/key|token|secret|password/i.test(k)) {\\n          return [k, typeof v === \"string\" && v.length > 0 ? \"*****\" : \"\"];\\n        }\\n        return [k, redact(v)];\\n      })\\n    );\\n  }\\n\\n  return redact(raw);\\n}\n    \u001b[7m   \u001b[0m \u001b[91m                                                                              ~~~~~~~\u001b[0m\n    \u001b[96msrc/config/convictConfig.ts\u001b[0m:\u001b[93m268\u001b[0m:\u001b[93m140\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m268\u001b[0m \\n/**\\n * Return the full runtime settings with sensitive keys redacted.\\n */\\nexport function getFullSettings(): Record<string, unknown> {\\n  const cfg = convictConfig();\\n  cfg.validate({ allowed: \"warn\" });\\n\\n  const raw = cfg.getProperties();\\n\\n  function redact(obj: any): any {\\n    if (typeof obj !== \"object\" || obj === null) return obj;\\n    return Object.fromEntries(\\n      Object.entries(obj).map(([k, v]) => {\\n        if (/key|token|secret|password/i.test(k)) {\\n          return [k, typeof v === \"string\" && v.length > 0 ? \"*****\" : \"\"];\\n        }\\n        return [k, redact(v)];\\n      })\\n    );\\n  }\\n\\n  return redact(raw);\\n}\n    \u001b[7m   \u001b[0m \u001b[91m                                                                                                                                           \u001b[0m\n    \u001b[96msrc/config/convictConfig.ts\u001b[0m:\u001b[93m268\u001b[0m:\u001b[93m141\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1434: \u001b[0mUnexpected keyword or identifier.\n\n    \u001b[7m268\u001b[0m \\n/**\\n * Return the full runtime settings with sensitive keys redacted.\\n */\\nexport function getFullSettings(): Record<string, unknown> {\\n  const cfg = convictConfig();\\n  cfg.validate({ allowed: \"warn\" });\\n\\n  const raw = cfg.getProperties();\\n\\n  function redact(obj: any): any {\\n    if (typeof obj !== \"object\" || obj === null) return obj;\\n    return Object.fromEntries(\\n      Object.entries(obj).map(([k, v]) => {\\n        if (/key|token|secret|password/i.test(k)) {\\n          return [k, typeof v === \"string\" && v.length > 0 ? \"*****\" : \"\"];\\n        }\\n        return [k, redact(v)];\\n      })\\n    );\\n  }\\n\\n  return redact(raw);\\n}\n    \u001b[7m   \u001b[0m \u001b[91m                                                                                                                                            ~\u001b[0m\n    \u001b[96msrc/config/convictConfig.ts\u001b[0m:\u001b[93m268\u001b[0m:\u001b[93m172\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m268\u001b[0m \\n/**\\n * Return the full runtime settings with sensitive keys redacted.\\n */\\nexport function getFullSettings(): Record<string, unknown> {\\n  const cfg = convictConfig();\\n  cfg.validate({ allowed: \"warn\" });\\n\\n  const raw = cfg.getProperties();\\n\\n  function redact(obj: any): any {\\n    if (typeof obj !== \"object\" || obj === null) return obj;\\n    return Object.fromEntries(\\n      Object.entries(obj).map(([k, v]) => {\\n        if (/key|token|secret|password/i.test(k)) {\\n          return [k, typeof v === \"string\" && v.length > 0 ? \"*****\" : \"\"];\\n        }\\n        return [k, redact(v)];\\n      })\\n    );\\n  }\\n\\n  return redact(raw);\\n}\n    \u001b[7m   \u001b[0m \u001b[91m                                                                                                                                                                           \u001b[0m\n    \u001b[96msrc/config/convictConfig.ts\u001b[0m:\u001b[93m268\u001b[0m:\u001b[93m173\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1434: \u001b[0mUnexpected keyword or identifier.\n\n    \u001b[7m268\u001b[0m \\n/**\\n * Return the full runtime settings with sensitive keys redacted.\\n */\\nexport function getFullSettings(): Record<string, unknown> {\\n  const cfg = convictConfig();\\n  cfg.validate({ allowed: \"warn\" });\\n\\n  const raw = cfg.getProperties();\\n\\n  function redact(obj: any): any {\\n    if (typeof obj !== \"object\" || obj === null) return obj;\\n    return Object.fromEntries(\\n      Object.entries(obj).map(([k, v]) => {\\n        if (/key|token|secret|password/i.test(k)) {\\n          return [k, typeof v === \"string\" && v.length > 0 ? \"*****\" : \"\"];\\n        }\\n        return [k, redact(v)];\\n      })\\n    );\\n  }\\n\\n  return redact(raw);\\n}\n    \u001b[7m   \u001b[0m \u001b[91m                                                                                                                                                                            ~\u001b[0m\n    \u001b[96msrc/config/convictConfig.ts\u001b[0m:\u001b[93m268\u001b[0m:\u001b[93m210\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m268\u001b[0m \\n/**\\n * Return the full runtime settings with sensitive keys redacted.\\n */\\nexport function getFullSettings(): Record<string, unknown> {\\n  const cfg = convictConfig();\\n  cfg.validate({ allowed: \"warn\" });\\n\\n  const raw = cfg.getProperties();\\n\\n  function redact(obj: any): any {\\n    if (typeof obj !== \"object\" || obj === null) return obj;\\n    return Object.fromEntries(\\n      Object.entries(obj).map(([k, v]) => {\\n        if (/key|token|secret|password/i.test(k)) {\\n          return [k, typeof v === \"string\" && v.length > 0 ? \"*****\" : \"\"];\\n        }\\n        return [k, redact(v)];\\n      })\\n    );\\n  }\\n\\n  return redact(raw);\\n}\n    \u001b[7m   \u001b[0m \u001b[91m                                                                                                                                                                                                                 \u001b[0m\n    \u001b[96msrc/config/convictConfig.ts\u001b[0m:\u001b[93m268\u001b[0m:\u001b[93m212\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m268\u001b[0m \\n/**\\n * Return the full runtime settings with sensitive keys redacted.\\n */\\nexport function getFullSettings(): Record<string, unknown> {\\n  const cfg = convictConfig();\\n  cfg.validate({ allowed: \"warn\" });\\n\\n  const raw = cfg.getProperties();\\n\\n  function redact(obj: any): any {\\n    if (typeof obj !== \"object\" || obj === null) return obj;\\n    return Object.fromEntries(\\n      Object.entries(obj).map(([k, v]) => {\\n        if (/key|token|secret|password/i.test(k)) {\\n          return [k, typeof v === \"string\" && v.length > 0 ? \"*****\" : \"\"];\\n        }\\n        return [k, redact(v)];\\n      })\\n    );\\n  }\\n\\n  return redact(raw);\\n}\n    \u001b[7m   \u001b[0m \u001b[91m                                                                                                                                                                                                                   \u001b[0m\n    \u001b[96msrc/config/convictConfig.ts\u001b[0m:\u001b[93m268\u001b[0m:\u001b[93m213\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1434: \u001b[0mUnexpected keyword or identifier.\n\n    \u001b[7m268\u001b[0m \\n/**\\n * Return the full runtime settings with sensitive keys redacted.\\n */\\nexport function getFullSettings(): Record<string, unknown> {\\n  const cfg = convictConfig();\\n  cfg.validate({ allowed: \"warn\" });\\n\\n  const raw = cfg.getProperties();\\n\\n  function redact(obj: any): any {\\n    if (typeof obj !== \"object\" || obj === null) return obj;\\n    return Object.fromEntries(\\n      Object.entries(obj).map(([k, v]) => {\\n        if (/key|token|secret|password/i.test(k)) {\\n          return [k, typeof v === \"string\" && v.length > 0 ? \"*****\" : \"\"];\\n        }\\n        return [k, redact(v)];\\n      })\\n    );\\n  }\\n\\n  return redact(raw);\\n}\n    \u001b[7m   \u001b[0m \u001b[91m                                                                                                                                                                                                                    ~\u001b[0m\n    \u001b[96msrc/config/convictConfig.ts\u001b[0m:\u001b[93m268\u001b[0m:\u001b[93m248\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m268\u001b[0m \\n/**\\n * Return the full runtime settings with sensitive keys redacted.\\n */\\nexport function getFullSettings(): Record<string, unknown> {\\n  const cfg = convictConfig();\\n  cfg.validate({ allowed: \"warn\" });\\n\\n  const raw = cfg.getProperties();\\n\\n  function redact(obj: any): any {\\n    if (typeof obj !== \"object\" || obj === null) return obj;\\n    return Object.fromEntries(\\n      Object.entries(obj).map(([k, v]) => {\\n        if (/key|token|secret|password/i.test(k)) {\\n          return [k, typeof v === \"string\" && v.length > 0 ? \"*****\" : \"\"];\\n        }\\n        return [k, redact(v)];\\n      })\\n    );\\n  }\\n\\n  return redact(raw);\\n}\n    \u001b[7m   \u001b[0m \u001b[91m                                                                                                                                                                                                                                                       \u001b[0m\n    \u001b[96msrc/config/convictConfig.ts\u001b[0m:\u001b[93m268\u001b[0m:\u001b[93m250\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m268\u001b[0m \\n/**\\n * Return the full runtime settings with sensitive keys redacted.\\n */\\nexport function getFullSettings(): Record<string, unknown> {\\n  const cfg = convictConfig();\\n  cfg.validate({ allowed: \"warn\" });\\n\\n  const raw = cfg.getProperties();\\n\\n  function redact(obj: any): any {\\n    if (typeof obj !== \"object\" || obj === null) return obj;\\n    return Object.fromEntries(\\n      Object.entries(obj).map(([k, v]) => {\\n        if (/key|token|secret|password/i.test(k)) {\\n          return [k, typeof v === \"string\" && v.length > 0 ? \"*****\" : \"\"];\\n        }\\n        return [k, redact(v)];\\n      })\\n    );\\n  }\\n\\n  return redact(raw);\\n}\n    \u001b[7m   \u001b[0m \u001b[91m                                                                                                                                                                                                                                                         \u001b[0m\n    \u001b[96msrc/config/convictConfig.ts\u001b[0m:\u001b[93m268\u001b[0m:\u001b[93m251\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1434: \u001b[0mUnexpected keyword or identifier.\n\n    \u001b[7m268\u001b[0m \\n/**\\n * Return the full runtime settings with sensitive keys redacted.\\n */\\nexport function getFullSettings(): Record<string, unknown> {\\n  const cfg = convictConfig();\\n  cfg.validate({ allowed: \"warn\" });\\n\\n  const raw = cfg.getProperties();\\n\\n  function redact(obj: any): any {\\n    if (typeof obj !== \"object\" || obj === null) return obj;\\n    return Object.fromEntries(\\n      Object.entries(obj).map(([k, v]) => {\\n        if (/key|token|secret|password/i.test(k)) {\\n          return [k, typeof v === \"string\" && v.length > 0 ? \"*****\" : \"\"];\\n        }\\n        return [k, redact(v)];\\n      })\\n    );\\n  }\\n\\n  return redact(raw);\\n}\n    \u001b[7m   \u001b[0m \u001b[91m                                                                                                                                                                                                                                                          ~\u001b[0m\n    \u001b[96msrc/config/convictConfig.ts\u001b[0m:\u001b[93m268\u001b[0m:\u001b[93m286\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m268\u001b[0m \\n/**\\n * Return the full runtime settings with sensitive keys redacted.\\n */\\nexport function getFullSettings(): Record<string, unknown> {\\n  const cfg = convictConfig();\\n  cfg.validate({ allowed: \"warn\" });\\n\\n  const raw = cfg.getProperties();\\n\\n  function redact(obj: any): any {\\n    if (typeof obj !== \"object\" || obj === null) return obj;\\n    return Object.fromEntries(\\n      Object.entries(obj).map(([k, v]) => {\\n        if (/key|token|secret|password/i.test(k)) {\\n          return [k, typeof v === \"string\" && v.length > 0 ? \"*****\" : \"\"];\\n        }\\n        return [k, redact(v)];\\n      })\\n    );\\n  }\\n\\n  return redact(raw);\\n}\n    \u001b[7m   \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                             \u001b[0m\n    \u001b[96msrc/config/convictConfig.ts\u001b[0m:\u001b[93m268\u001b[0m:\u001b[93m287\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1434: \u001b[0mUnexpected keyword or identifier.\n\n    \u001b[7m268\u001b[0m \\n/**\\n * Return the full runtime settings with sensitive keys redacted.\\n */\\nexport function getFullSettings(): Record<string, unknown> {\\n  const cfg = convictConfig();\\n  cfg.validate({ allowed: \"warn\" });\\n\\n  const raw = cfg.getProperties();\\n\\n  function redact(obj: any): any {\\n    if (typeof obj !== \"object\" || obj === null) return obj;\\n    return Object.fromEntries(\\n      Object.entries(obj).map(([k, v]) => {\\n        if (/key|token|secret|password/i.test(k)) {\\n          return [k, typeof v === \"string\" && v.length > 0 ? \"*****\" : \"\"];\\n        }\\n        return [k, redact(v)];\\n      })\\n    );\\n  }\\n\\n  return redact(raw);\\n}\n    \u001b[7m   \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                              ~\u001b[0m\n    \u001b[96msrc/config/convictConfig.ts\u001b[0m:\u001b[93m268\u001b[0m:\u001b[93m348\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m268\u001b[0m \\n/**\\n * Return the full runtime settings with sensitive keys redacted.\\n */\\nexport function getFullSettings(): Record<string, unknown> {\\n  const cfg = convictConfig();\\n  cfg.validate({ allowed: \"warn\" });\\n\\n  const raw = cfg.getProperties();\\n\\n  function redact(obj: any): any {\\n    if (typeof obj !== \"object\" || obj === null) return obj;\\n    return Object.fromEntries(\\n      Object.entries(obj).map(([k, v]) => {\\n        if (/key|token|secret|password/i.test(k)) {\\n          return [k, typeof v === \"string\" && v.length > 0 ? \"*****\" : \"\"];\\n        }\\n        return [k, redact(v)];\\n      })\\n    );\\n  }\\n\\n  return redact(raw);\\n}\n    \u001b[7m   \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                                                                                           \u001b[0m\n    \u001b[96msrc/config/convictConfig.ts\u001b[0m:\u001b[93m268\u001b[0m:\u001b[93m349\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1434: \u001b[0mUnexpected keyword or identifier.\n\n    \u001b[7m268\u001b[0m \\n/**\\n * Return the full runtime settings with sensitive keys redacted.\\n */\\nexport function getFullSettings(): Record<string, unknown> {\\n  const cfg = convictConfig();\\n  cfg.validate({ allowed: \"warn\" });\\n\\n  const raw = cfg.getProperties();\\n\\n  function redact(obj: any): any {\\n    if (typeof obj !== \"object\" || obj === null) return obj;\\n    return Object.fromEntries(\\n      Object.entries(obj).map(([k, v]) => {\\n        if (/key|token|secret|password/i.test(k)) {\\n          return [k, typeof v === \"string\" && v.length > 0 ? \"*****\" : \"\"];\\n        }\\n        return [k, redact(v)];\\n      })\\n    );\\n  }\\n\\n  return redact(raw);\\n}\n    \u001b[7m   \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                                                                                            ~\u001b[0m\n    \u001b[96msrc/config/convictConfig.ts\u001b[0m:\u001b[93m268\u001b[0m:\u001b[93m380\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m268\u001b[0m \\n/**\\n * Return the full runtime settings with sensitive keys redacted.\\n */\\nexport function getFullSettings(): Record<string, unknown> {\\n  const cfg = convictConfig();\\n  cfg.validate({ allowed: \"warn\" });\\n\\n  const raw = cfg.getProperties();\\n\\n  function redact(obj: any): any {\\n    if (typeof obj !== \"object\" || obj === null) return obj;\\n    return Object.fromEntries(\\n      Object.entries(obj).map(([k, v]) => {\\n        if (/key|token|secret|password/i.test(k)) {\\n          return [k, typeof v === \"string\" && v.length > 0 ? \"*****\" : \"\"];\\n        }\\n        return [k, redact(v)];\\n      })\\n    );\\n  }\\n\\n  return redact(raw);\\n}\n    \u001b[7m   \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                                                                                                                           \u001b[0m\n    \u001b[96msrc/config/convictConfig.ts\u001b[0m:\u001b[93m268\u001b[0m:\u001b[93m388\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1005: \u001b[0m',' expected.\n\n    \u001b[7m268\u001b[0m \\n/**\\n * Return the full runtime settings with sensitive keys redacted.\\n */\\nexport function getFullSettings(): Record<string, unknown> {\\n  const cfg = convictConfig();\\n  cfg.validate({ allowed: \"warn\" });\\n\\n  const raw = cfg.getProperties();\\n\\n  function redact(obj: any): any {\\n    if (typeof obj !== \"object\" || obj === null) return obj;\\n    return Object.fromEntries(\\n      Object.entries(obj).map(([k, v]) => {\\n        if (/key|token|secret|password/i.test(k)) {\\n          return [k, typeof v === \"string\" && v.length > 0 ? \"*****\" : \"\"];\\n        }\\n        return [k, redact(v)];\\n      })\\n    );\\n  }\\n\\n  return redact(raw);\\n}\n    \u001b[7m   \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                                                                                                                                   ~~~~~~\u001b[0m\n    \u001b[96msrc/config/convictConfig.ts\u001b[0m:\u001b[93m268\u001b[0m:\u001b[93m425\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m268\u001b[0m \\n/**\\n * Return the full runtime settings with sensitive keys redacted.\\n */\\nexport function getFullSettings(): Record<string, unknown> {\\n  const cfg = convictConfig();\\n  cfg.validate({ allowed: \"warn\" });\\n\\n  const raw = cfg.getProperties();\\n\\n  function redact(obj: any): any {\\n    if (typeof obj !== \"object\" || obj === null) return obj;\\n    return Object.fromEntries(\\n      Object.entries(obj).map(([k, v]) => {\\n        if (/key|token|secret|password/i.test(k)) {\\n          return [k, typeof v === \"string\" && v.length > 0 ? \"*****\" : \"\"];\\n        }\\n        return [k, redact(v)];\\n      })\\n    );\\n  }\\n\\n  return redact(raw);\\n}\n    \u001b[7m   \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                                                                                                                                                                        \u001b[0m\n    \u001b[96msrc/config/convictConfig.ts\u001b[0m:\u001b[93m268\u001b[0m:\u001b[93m426\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1434: \u001b[0mUnexpected keyword or identifier.\n\n    \u001b[7m268\u001b[0m \\n/**\\n * Return the full runtime settings with sensitive keys redacted.\\n */\\nexport function getFullSettings(): Record<string, unknown> {\\n  const cfg = convictConfig();\\n  cfg.validate({ allowed: \"warn\" });\\n\\n  const raw = cfg.getProperties();\\n\\n  function redact(obj: any): any {\\n    if (typeof obj !== \"object\" || obj === null) return obj;\\n    return Object.fromEntries(\\n      Object.entries(obj).map(([k, v]) => {\\n        if (/key|token|secret|password/i.test(k)) {\\n          return [k, typeof v === \"string\" && v.length > 0 ? \"*****\" : \"\"];\\n        }\\n        return [k, redact(v)];\\n      })\\n    );\\n  }\\n\\n  return redact(raw);\\n}\n    \u001b[7m   \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                                                                                                                                                                         ~\u001b[0m\n    \u001b[96msrc/config/convictConfig.ts\u001b[0m:\u001b[93m268\u001b[0m:\u001b[93m478\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m268\u001b[0m \\n/**\\n * Return the full runtime settings with sensitive keys redacted.\\n */\\nexport function getFullSettings(): Record<string, unknown> {\\n  const cfg = convictConfig();\\n  cfg.validate({ allowed: \"warn\" });\\n\\n  const raw = cfg.getProperties();\\n\\n  function redact(obj: any): any {\\n    if (typeof obj !== \"object\" || obj === null) return obj;\\n    return Object.fromEntries(\\n      Object.entries(obj).map(([k, v]) => {\\n        if (/key|token|secret|password/i.test(k)) {\\n          return [k, typeof v === \"string\" && v.length > 0 ? \"*****\" : \"\"];\\n        }\\n        return [k, redact(v)];\\n      })\\n    );\\n  }\\n\\n  return redact(raw);\\n}\n    \u001b[7m   \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             \u001b[0m\n    \u001b[96msrc/config/convictConfig.ts\u001b[0m:\u001b[93m268\u001b[0m:\u001b[93m479\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1434: \u001b[0mUnexpected keyword or identifier.\n\n    \u001b[7m268\u001b[0m \\n/**\\n * Return the full runtime settings with sensitive keys redacted.\\n */\\nexport function getFullSettings(): Record<string, unknown> {\\n  const cfg = convictConfig();\\n  cfg.validate({ allowed: \"warn\" });\\n\\n  const raw = cfg.getProperties();\\n\\n  function redact(obj: any): any {\\n    if (typeof obj !== \"object\" || obj === null) return obj;\\n    return Object.fromEntries(\\n      Object.entries(obj).map(([k, v]) => {\\n        if (/key|token|secret|password/i.test(k)) {\\n          return [k, typeof v === \"string\" && v.length > 0 ? \"*****\" : \"\"];\\n        }\\n        return [k, redact(v)];\\n      })\\n    );\\n  }\\n\\n  return redact(raw);\\n}\n    \u001b[7m   \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              ~\u001b[0m\n    \u001b[96msrc/config/convictConfig.ts\u001b[0m:\u001b[93m268\u001b[0m:\u001b[93m555\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m268\u001b[0m \\n/**\\n * Return the full runtime settings with sensitive keys redacted.\\n */\\nexport function getFullSettings(): Record<string, unknown> {\\n  const cfg = convictConfig();\\n  cfg.validate({ allowed: \"warn\" });\\n\\n  const raw = cfg.getProperties();\\n\\n  function redact(obj: any): any {\\n    if (typeof obj !== \"object\" || obj === null) return obj;\\n    return Object.fromEntries(\\n      Object.entries(obj).map(([k, v]) => {\\n        if (/key|token|secret|password/i.test(k)) {\\n          return [k, typeof v === \"string\" && v.length > 0 ? \"*****\" : \"\"];\\n        }\\n        return [k, redact(v)];\\n      })\\n    );\\n  }\\n\\n  return redact(raw);\\n}\n    \u001b[7m   \u001b[0m \u001b[91mu001b[0m\n    \u001b[96msrc/config/convictConfig.ts\u001b[0m:\u001b[93m268\u001b[0m:\u001b[93m566\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m268\u001b[0m \\n/**\\n * Return the full runtime settings with sensitive keys redacted.\\n */\\nexport function getFullSettings(): Record<string, unknown> {\\n  const cfg = convictConfig();\\n  cfg.validate({ allowed: \"warn\" });\\n\\n  const raw = cfg.getProperties();\\n\\n  function redact(obj: any): any {\\n    if (typeof obj !== \"object\" || obj === null) return obj;\\n    return Object.fromEntries(\\n      Object.entries(obj).map(([k, v]) => {\\n        if (/key|token|secret|password/i.test(k)) {\\n          return [k, typeof v === \"string\" && v.length > 0 ? \"*****\" : \"\"];\\n        }\\n        return [k, redact(v)];\\n      })\\n    );\\n  }\\n\\n  return redact(raw);\\n}\n    \u001b[7m   \u001b[0m \u001b[91mu001b[0m\n    \u001b[96msrc/config/convictConfig.ts\u001b[0m:\u001b[93m268\u001b[0m:\u001b[93m567\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1434: \u001b[0mUnexpected keyword or identifier.\n\n    \u001b[7m268\u001b[0m \\n/**\\n * Return the full runtime settings with sensitive keys redacted.\\n */\\nexport function getFullSettings(): Record<string, unknown> {\\n  const cfg = convictConfig();\\n  cfg.validate({ allowed: \"warn\" });\\n\\n  const raw = cfg.getProperties();\\n\\n  function redact(obj: any): any {\\n    if (typeof obj !== \"object\" || obj === null) return obj;\\n    return Object.fromEntries(\\n      Object.entries(obj).map(([k, v]) => {\\n        if (/key|token|secret|password/i.test(k)) {\\n          return [k, typeof v === \"string\" && v.length > 0 ? \"*****\" : \"\"];\\n        }\\n        return [k, redact(v)];\\n      })\\n    );\\n  }\\n\\n  return redact(raw);\\n}\n    \u001b[7m   \u001b[0m \u001b[91m~\u001b[0m\n    \u001b[96msrc/config/convictConfig.ts\u001b[0m:\u001b[93m268\u001b[0m:\u001b[93m598\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m268\u001b[0m \\n/**\\n * Return the full runtime settings with sensitive keys redacted.\\n */\\nexport function getFullSettings(): Record<string, unknown> {\\n  const cfg = convictConfig();\\n  cfg.validate({ allowed: \"warn\" });\\n\\n  const raw = cfg.getProperties();\\n\\n  function redact(obj: any): any {\\n    if (typeof obj !== \"object\" || obj === null) return obj;\\n    return Object.fromEntries(\\n      Object.entries(obj).map(([k, v]) => {\\n        if (/key|token|secret|password/i.test(k)) {\\n          return [k, typeof v === \"string\" && v.length > 0 ? \"*****\" : \"\"];\\n        }\\n        return [k, redact(v)];\\n      })\\n    );\\n  }\\n\\n  return redact(raw);\\n}\n    \u001b[7m   \u001b[0m \u001b[91mu001b[0m\n    \u001b[96msrc/config/convictConfig.ts\u001b[0m:\u001b[93m268\u001b[0m:\u001b[93m608\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m268\u001b[0m \\n/**\\n * Return the full runtime settings with sensitive keys redacted.\\n */\\nexport function getFullSettings(): Record<string, unknown> {\\n  const cfg = convictConfig();\\n  cfg.validate({ allowed: \"warn\" });\\n\\n  const raw = cfg.getProperties();\\n\\n  function redact(obj: any): any {\\n    if (typeof obj !== \"object\" || obj === null) return obj;\\n    return Object.fromEntries(\\n      Object.entries(obj).map(([k, v]) => {\\n        if (/key|token|secret|password/i.test(k)) {\\n          return [k, typeof v === \"string\" && v.length > 0 ? \"*****\" : \"\"];\\n        }\\n        return [k, redact(v)];\\n      })\\n    );\\n  }\\n\\n  return redact(raw);\\n}\n    \u001b[7m   \u001b[0m \u001b[91mu001b[0m\n    \u001b[96msrc/config/convictConfig.ts\u001b[0m:\u001b[93m268\u001b[0m:\u001b[93m616\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m268\u001b[0m \\n/**\\n * Return the full runtime settings with sensitive keys redacted.\\n */\\nexport function getFullSettings(): Record<string, unknown> {\\n  const cfg = convictConfig();\\n  cfg.validate({ allowed: \"warn\" });\\n\\n  const raw = cfg.getProperties();\\n\\n  function redact(obj: any): any {\\n    if (typeof obj !== \"object\" || obj === null) return obj;\\n    return Object.fromEntries(\\n      Object.entries(obj).map(([k, v]) => {\\n        if (/key|token|secret|password/i.test(k)) {\\n          return [k, typeof v === \"string\" && v.length > 0 ? \"*****\" : \"\"];\\n        }\\n        return [k, redact(v)];\\n      })\\n    );\\n  }\\n\\n  return redact(raw);\\n}\n    \u001b[7m   \u001b[0m \u001b[91mu001b[0m\n    \u001b[96msrc/config/convictConfig.ts\u001b[0m:\u001b[93m268\u001b[0m:\u001b[93m621\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m268\u001b[0m \\n/**\\n * Return the full runtime settings with sensitive keys redacted.\\n */\\nexport function getFullSettings(): Record<string, unknown> {\\n  const cfg = convictConfig();\\n  cfg.validate({ allowed: \"warn\" });\\n\\n  const raw = cfg.getProperties();\\n\\n  function redact(obj: any): any {\\n    if (typeof obj !== \"object\" || obj === null) return obj;\\n    return Object.fromEntries(\\n      Object.entries(obj).map(([k, v]) => {\\n        if (/key|token|secret|password/i.test(k)) {\\n          return [k, typeof v === \"string\" && v.length > 0 ? \"*****\" : \"\"];\\n        }\\n        return [k, redact(v)];\\n      })\\n    );\\n  }\\n\\n  return redact(raw);\\n}\n    \u001b[7m   \u001b[0m \u001b[91mu001b[0m\n    \u001b[96msrc/config/convictConfig.ts\u001b[0m:\u001b[93m268\u001b[0m:\u001b[93m623\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m268\u001b[0m \\n/**\\n * Return the full runtime settings with sensitive keys redacted.\\n */\\nexport function getFullSettings(): Record<string, unknown> {\\n  const cfg = convictConfig();\\n  cfg.validate({ allowed: \"warn\" });\\n\\n  const raw = cfg.getProperties();\\n\\n  function redact(obj: any): any {\\n    if (typeof obj !== \"object\" || obj === null) return obj;\\n    return Object.fromEntries(\\n      Object.entries(obj).map(([k, v]) => {\\n        if (/key|token|secret|password/i.test(k)) {\\n          return [k, typeof v === \"string\" && v.length > 0 ? \"*****\" : \"\"];\\n        }\\n        return [k, redact(v)];\\n      })\\n    );\\n  }\\n\\n  return redact(raw);\\n}\n    \u001b[7m   \u001b[0m \u001b[91mu001b[0m\n    \u001b[96msrc/config/convictConfig.ts\u001b[0m:\u001b[93m268\u001b[0m:\u001b[93m624\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1434: \u001b[0mUnexpected keyword or identifier.\n\n    \u001b[7m268\u001b[0m \\n/**\\n * Return the full runtime settings with sensitive keys redacted.\\n */\\nexport function getFullSettings(): Record<string, unknown> {\\n  const cfg = convictConfig();\\n  cfg.validate({ allowed: \"warn\" });\\n\\n  const raw = cfg.getProperties();\\n\\n  function redact(obj: any): any {\\n    if (typeof obj !== \"object\" || obj === null) return obj;\\n    return Object.fromEntries(\\n      Object.entries(obj).map(([k, v]) => {\\n        if (/key|token|secret|password/i.test(k)) {\\n          return [k, typeof v === \"string\" && v.length > 0 ? \"*****\" : \"\"];\\n        }\\n        return [k, redact(v)];\\n      })\\n    );\\n  }\\n\\n  return redact(raw);\\n}\n    \u001b[7m   \u001b[0m \u001b[91m~\u001b[0m\n    \u001b[96msrc/config/convictConfig.ts\u001b[0m:\u001b[93m268\u001b[0m:\u001b[93m646\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m268\u001b[0m \\n/**\\n * Return the full runtime settings with sensitive keys redacted.\\n */\\nexport function getFullSettings(): Record<string, unknown> {\\n  const cfg = convictConfig();\\n  cfg.validate({ allowed: \"warn\" });\\n\\n  const raw = cfg.getProperties();\\n\\n  function redact(obj: any): any {\\n    if (typeof obj !== \"object\" || obj === null) return obj;\\n    return Object.fromEntries(\\n      Object.entries(obj).map(([k, v]) => {\\n        if (/key|token|secret|password/i.test(k)) {\\n          return [k, typeof v === \"string\" && v.length > 0 ? \"*****\" : \"\"];\\n        }\\n        return [k, redact(v)];\\n      })\\n    );\\n  }\\n\\n  return redact(raw);\\n}\n    \u001b[7m   \u001b[0m \u001b[91mu001b[0m\n","name":"/home/chatgpt/gpt-terminal-plus/tests/config/convictConfig.test.ts","startTime":1755557566821,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1755557566821,"message":"  ● Test suite failed to run\n\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m2\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m112\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'nrouter'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                               ~~~~~~~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m169\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                        ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m178\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                 ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m200\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'getFullSettings'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                       ~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m219\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                          ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m260\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                   ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m284\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                           ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m355\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                                                                                                  ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m447\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                                                                                                                                                                                              ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m452\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                                                                                                                                                                                                   ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m1\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m111\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                              \u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m168\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                       \u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m169\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1434: \u001b[0mUnexpected keyword or identifier.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                        ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m177\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                \u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m178\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1434: \u001b[0mUnexpected keyword or identifier.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                 ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m218\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                         \u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m219\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1434: \u001b[0mUnexpected keyword or identifier.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                          ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m259\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                  \u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m283\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                          \u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m284\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1434: \u001b[0mUnexpected keyword or identifier.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                           ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m354\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                                                                                                 \u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m355\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1434: \u001b[0mUnexpected keyword or identifier.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                                                                                                  ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m446\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                                                                                                                                                                                             \u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m451\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                                                                                                                                                                                                  \u001b[0m\n","name":"/home/chatgpt/gpt-terminal-plus/tests/setup.ui.test.ts","startTime":1755557566821,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1755557566821,"message":"  ● Test suite failed to run\n\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m2\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m112\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'nrouter'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                               ~~~~~~~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m169\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                        ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m178\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                 ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m200\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'getFullSettings'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                       ~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m219\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                          ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m260\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                   ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m284\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                           ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m355\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                                                                                                  ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m447\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                                                                                                                                                                                              ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m452\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                                                                                                                                                                                                   ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m1\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m111\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                              \u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m168\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                       \u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m169\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1434: \u001b[0mUnexpected keyword or identifier.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                        ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m177\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                \u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m178\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1434: \u001b[0mUnexpected keyword or identifier.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                 ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m218\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                         \u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m219\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1434: \u001b[0mUnexpected keyword or identifier.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                          ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m259\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                  \u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m283\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                          \u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m284\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1434: \u001b[0mUnexpected keyword or identifier.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                           ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m354\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                                                                                                 \u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m355\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1434: \u001b[0mUnexpected keyword or identifier.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                                                                                                  ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m446\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                                                                                                                                                                                             \u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m451\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                                                                                                                                                                                                  \u001b[0m\n","name":"/home/chatgpt/gpt-terminal-plus/tests/setup.ssh.edit.test.ts","startTime":1755557566821,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1755557566821,"message":"  ● Test suite failed to run\n\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m2\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m112\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'nrouter'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                               ~~~~~~~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m169\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                        ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m178\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                 ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m200\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'getFullSettings'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                       ~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m219\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                          ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m260\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                   ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m284\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                           ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m355\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                                                                                                  ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m447\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                                                                                                                                                                                              ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m452\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                                                                                                                                                                                                   ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m1\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m111\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                              \u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m168\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                       \u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m169\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1434: \u001b[0mUnexpected keyword or identifier.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                        ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m177\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                \u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m178\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1434: \u001b[0mUnexpected keyword or identifier.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                 ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m218\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                         \u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m219\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1434: \u001b[0mUnexpected keyword or identifier.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                          ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m259\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                  \u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m283\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                          \u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m284\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1434: \u001b[0mUnexpected keyword or identifier.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                           ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m354\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                                                                                                 \u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m355\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1434: \u001b[0mUnexpected keyword or identifier.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                                                                                                  ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m446\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                                                                                                                                                                                             \u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m451\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                                                                                                                                                                                                  \u001b[0m\n","name":"/home/chatgpt/gpt-terminal-plus/tests/setup.policy.test.ts","startTime":1755557566821,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1755557566821,"message":"  ● Test suite failed to run\n\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m2\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m112\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'nrouter'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                               ~~~~~~~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m169\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                        ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m178\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                 ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m200\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'getFullSettings'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                       ~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m219\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                          ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m260\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                   ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m284\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                           ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m355\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                                                                                                  ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m447\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                                                                                                                                                                                              ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m452\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                                                                                                                                                                                                   ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m1\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m111\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                              \u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m168\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                       \u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m169\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1434: \u001b[0mUnexpected keyword or identifier.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                        ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m177\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                \u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m178\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1434: \u001b[0mUnexpected keyword or identifier.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                 ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m218\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                         \u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m219\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1434: \u001b[0mUnexpected keyword or identifier.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                          ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m259\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                  \u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m283\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                          \u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m284\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1434: \u001b[0mUnexpected keyword or identifier.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                           ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m354\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                                                                                                 \u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m355\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1434: \u001b[0mUnexpected keyword or identifier.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                                                                                                  ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m446\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                                                                                                                                                                                             \u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m451\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                                                                                                                                                                                                  \u001b[0m\n","name":"/home/chatgpt/gpt-terminal-plus/tests/server.list.test.ts","startTime":1755557566821,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1755557566821,"message":"  ● Test suite failed to run\n\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m2\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m112\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'nrouter'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                               ~~~~~~~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m169\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                        ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m178\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                 ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m200\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'getFullSettings'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                       ~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m219\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                          ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m260\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                   ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m284\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                           ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m355\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                                                                                                  ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m447\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                                                                                                                                                                                              ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m452\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                                                                                                                                                                                                   ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m1\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m111\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                              \u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m168\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                       \u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m169\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1434: \u001b[0mUnexpected keyword or identifier.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                        ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m177\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                \u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m178\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1434: \u001b[0mUnexpected keyword or identifier.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                 ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m218\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                         \u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m219\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1434: \u001b[0mUnexpected keyword or identifier.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                          ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m259\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                  \u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m283\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                          \u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m284\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1434: \u001b[0mUnexpected keyword or identifier.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                           ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m354\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                                                                                                 \u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m355\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1434: \u001b[0mUnexpected keyword or identifier.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                                                                                                  ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m446\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                                                                                                                                                                                             \u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m451\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                                                                                                                                                                                                  \u001b[0m\n","name":"/home/chatgpt/gpt-terminal-plus/tests/openapi.spec.test.js","startTime":1755557566821,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1755557566821,"message":"  ● Test suite failed to run\n\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m2\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m112\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'nrouter'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                               ~~~~~~~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m169\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                        ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m178\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                 ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m200\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'getFullSettings'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                       ~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m219\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                          ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m260\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                   ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m284\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                           ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m355\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                                                                                                  ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m447\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                                                                                                                                                                                              ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m452\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                                                                                                                                                                                                   ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m1\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m111\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                              \u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m168\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                       \u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m169\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1434: \u001b[0mUnexpected keyword or identifier.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                        ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m177\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                \u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m178\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1434: \u001b[0mUnexpected keyword or identifier.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                 ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m218\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                         \u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m219\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1434: \u001b[0mUnexpected keyword or identifier.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                          ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m259\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                  \u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m283\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                          \u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m284\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1434: \u001b[0mUnexpected keyword or identifier.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                           ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m354\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                                                                                                 \u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m355\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1434: \u001b[0mUnexpected keyword or identifier.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                                                                                                  ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m446\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                                                                                                                                                                                             \u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m451\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                                                                                                                                                                                                  \u001b[0m\n","name":"/home/chatgpt/gpt-terminal-plus/tests/models.test.ts","startTime":1755557566821,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1755557566821,"message":"  ● Test suite failed to run\n\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m2\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m112\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'nrouter'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                               ~~~~~~~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m169\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                        ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m178\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                 ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m200\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'getFullSettings'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                       ~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m219\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                          ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m260\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                   ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m284\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                           ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m355\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                                                                                                  ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m447\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                                                                                                                                                                                              ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m452\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                                                                                                                                                                                                   ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m1\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m111\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                              \u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m168\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                       \u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m169\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1434: \u001b[0mUnexpected keyword or identifier.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                        ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m177\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                \u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m178\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1434: \u001b[0mUnexpected keyword or identifier.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                 ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m218\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                         \u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m219\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1434: \u001b[0mUnexpected keyword or identifier.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                          ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m259\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                  \u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m283\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                          \u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m284\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1434: \u001b[0mUnexpected keyword or identifier.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                           ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m354\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                                                                                                 \u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m355\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1434: \u001b[0mUnexpected keyword or identifier.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                                                                                                  ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m446\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                                                                                                                                                                                             \u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m451\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                                                                                                                                                                                                  \u001b[0m\n","name":"/home/chatgpt/gpt-terminal-plus/tests/middlewares.initializeServerHandler.test.ts","startTime":1755557566821,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1755557566821,"message":"  ● Test suite failed to run\n\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m2\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m112\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'nrouter'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                               ~~~~~~~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m169\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                        ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m178\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                 ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m200\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'getFullSettings'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                       ~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m219\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                          ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m260\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                   ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m284\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                           ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m355\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                                                                                                  ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m447\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                                                                                                                                                                                              ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m452\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                                                                                                                                                                                                   ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m1\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m111\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                              \u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m168\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                       \u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m169\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1434: \u001b[0mUnexpected keyword or identifier.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                        ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m177\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                \u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m178\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1434: \u001b[0mUnexpected keyword or identifier.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                 ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m218\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                         \u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m219\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1434: \u001b[0mUnexpected keyword or identifier.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                          ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m259\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                  \u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m283\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                          \u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m284\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1434: \u001b[0mUnexpected keyword or identifier.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                           ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m354\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                                                                                                 \u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m355\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1434: \u001b[0mUnexpected keyword or identifier.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                                                                                                  ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m446\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                                                                                                                                                                                             \u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m451\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                                                                                                                                                                                                  \u001b[0m\n","name":"/home/chatgpt/gpt-terminal-plus/tests/executeLlm.test.ts","startTime":1755557566821,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1755557566821,"message":"  ● Test suite failed to run\n\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m2\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m112\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'nrouter'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                               ~~~~~~~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m169\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                        ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m178\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                 ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m200\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'getFullSettings'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                       ~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m219\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                          ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m260\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                   ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m284\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                           ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m355\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                                                                                                  ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m447\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                                                                                                                                                                                              ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m452\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                                                                                                                                                                                                   ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m1\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m111\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                              \u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m168\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                       \u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m169\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1434: \u001b[0mUnexpected keyword or identifier.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                        ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m177\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                \u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m178\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1434: \u001b[0mUnexpected keyword or identifier.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                 ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m218\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                         \u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m219\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1434: \u001b[0mUnexpected keyword or identifier.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                          ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m259\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                  \u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m283\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                          \u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m284\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1434: \u001b[0mUnexpected keyword or identifier.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                           ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m354\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                                                                                                 \u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m355\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1434: \u001b[0mUnexpected keyword or identifier.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                                                                                                  ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m446\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                                                                                                                                                                                             \u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m451\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                                                                                                                                                                                                  \u001b[0m\n","name":"/home/chatgpt/gpt-terminal-plus/tests/executeLlm.stream.test.ts","startTime":1755557566821,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1755557566821,"message":"  ● Test suite failed to run\n\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m2\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m112\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'nrouter'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                               ~~~~~~~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m169\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                        ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m178\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                 ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m200\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'getFullSettings'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                       ~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m219\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                          ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m260\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                   ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m284\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                           ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m355\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                                                                                                  ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m447\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                                                                                                                                                                                              ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m452\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                                                                                                                                                                                                   ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m1\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m111\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                              \u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m168\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                       \u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m169\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1434: \u001b[0mUnexpected keyword or identifier.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                        ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m177\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                \u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m178\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1434: \u001b[0mUnexpected keyword or identifier.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                 ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m218\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                         \u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m219\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1434: \u001b[0mUnexpected keyword or identifier.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                          ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m259\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                  \u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m283\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                          \u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m284\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1434: \u001b[0mUnexpected keyword or identifier.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                           ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m354\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                                                                                                 \u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m355\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1434: \u001b[0mUnexpected keyword or identifier.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                                                                                                  ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m446\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                                                                                                                                                                                             \u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m451\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                                                                                                                                                                                                  \u001b[0m\n","name":"/home/chatgpt/gpt-terminal-plus/tests/executeLlm.ssh.stream.test.ts","startTime":1755557566821,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1755557566821,"message":"  ● Test suite failed to run\n\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m2\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m112\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'nrouter'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                               ~~~~~~~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m169\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                        ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m178\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                 ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m200\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'getFullSettings'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                       ~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m219\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                          ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m260\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                   ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m284\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                           ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m355\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                                                                                                  ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m447\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                                                                                                                                                                                              ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m452\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                                                                                                                                                                                                   ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m1\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m111\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                              \u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m168\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                       \u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m169\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1434: \u001b[0mUnexpected keyword or identifier.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                        ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m177\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                \u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m178\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1434: \u001b[0mUnexpected keyword or identifier.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                 ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m218\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                         \u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m219\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1434: \u001b[0mUnexpected keyword or identifier.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                          ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m259\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                  \u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m283\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                          \u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m284\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1434: \u001b[0mUnexpected keyword or identifier.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                           ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m354\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                                                                                                 \u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m355\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1434: \u001b[0mUnexpected keyword or identifier.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                                                                                                  ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m446\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                                                                                                                                                                                             \u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m451\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                                                                                                                                                                                                  \u001b[0m\n","name":"/home/chatgpt/gpt-terminal-plus/tests/executeCode.errorAnalysis.test.ts","startTime":1755557566821,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1755557566821,"message":"  ● Test suite failed to run\n\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m2\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m112\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'nrouter'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                               ~~~~~~~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m169\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                        ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m178\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                 ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m200\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'getFullSettings'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                       ~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m219\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                          ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m260\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                   ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m284\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                           ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m355\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                                                                                                  ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m447\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                                                                                                                                                                                              ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m452\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                                                                                                                                                                                                   ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m1\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m111\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                              \u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m168\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                       \u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m169\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1434: \u001b[0mUnexpected keyword or identifier.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                        ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m177\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                \u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m178\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1434: \u001b[0mUnexpected keyword or identifier.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                 ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m218\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                         \u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m219\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1434: \u001b[0mUnexpected keyword or identifier.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                          ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m259\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                  \u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m283\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                          \u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m284\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1434: \u001b[0mUnexpected keyword or identifier.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                           ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m354\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                                                                                                 \u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m355\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1434: \u001b[0mUnexpected keyword or identifier.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                                                                                                  ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m446\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                                                                                                                                                                                             \u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m451\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                                                                                                                                                                                                  \u001b[0m\n","name":"/home/chatgpt/gpt-terminal-plus/tests/execute.shell.simple.test.ts","startTime":1755557566821,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1755557566821,"message":"  ● Test suite failed to run\n\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m2\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m112\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'nrouter'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                               ~~~~~~~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m169\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                        ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m178\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                 ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m200\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'getFullSettings'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                       ~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m219\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                          ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m260\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                   ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m284\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                           ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m355\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                                                                                                  ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m447\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                                                                                                                                                                                              ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m452\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                                                                                                                                                                                                   ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m1\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m111\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                              \u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m168\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                       \u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m169\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1434: \u001b[0mUnexpected keyword or identifier.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                        ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m177\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                \u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m178\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1434: \u001b[0mUnexpected keyword or identifier.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                 ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m218\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                         \u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m219\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1434: \u001b[0mUnexpected keyword or identifier.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                          ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m259\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                  \u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m283\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                          \u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m284\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1434: \u001b[0mUnexpected keyword or identifier.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                           ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m354\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                                                                                                 \u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m355\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1434: \u001b[0mUnexpected keyword or identifier.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                                                                                                  ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m446\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                                                                                                                                                                                             \u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m451\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                                                                                                                                                                                                  \u001b[0m\n","name":"/home/chatgpt/gpt-terminal-plus/tests/execute.shell.edge.test.ts","startTime":1755557566821,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1755557566821,"message":"  ● Test suite failed to run\n\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m2\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m112\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'nrouter'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                               ~~~~~~~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m169\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                        ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m178\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                 ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m200\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'getFullSettings'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                       ~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m219\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                          ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m260\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                   ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m284\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                           ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m355\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                                                                                                  ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m447\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                                                                                                                                                                                              ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m452\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                                                                                                                                                                                                   ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m1\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m111\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                              \u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m168\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                       \u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m169\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1434: \u001b[0mUnexpected keyword or identifier.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                        ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m177\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                \u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m178\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1434: \u001b[0mUnexpected keyword or identifier.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                 ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m218\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                         \u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m219\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1434: \u001b[0mUnexpected keyword or identifier.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                          ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m259\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                  \u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m283\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                          \u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m284\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1434: \u001b[0mUnexpected keyword or identifier.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                           ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m354\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                                                                                                 \u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m355\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1434: \u001b[0mUnexpected keyword or identifier.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                                                                                                  ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m446\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                                                                                                                                                                                             \u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m451\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                                                                                                                                                                                                  \u001b[0m\n","name":"/home/chatgpt/gpt-terminal-plus/tests/execute.python.test.ts","startTime":1755557566821,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1755557566821,"message":"  ● Test suite failed to run\n\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m2\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m112\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'nrouter'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                               ~~~~~~~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m169\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                        ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m178\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                 ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m200\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'getFullSettings'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                       ~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m219\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                          ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m260\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                   ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m284\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                           ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m355\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                                                                                                  ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m447\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                                                                                                                                                                                              ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m452\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                                                                                                                                                                                                   ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m1\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m111\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                              \u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m168\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                       \u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m169\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1434: \u001b[0mUnexpected keyword or identifier.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                        ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m177\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                \u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m178\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1434: \u001b[0mUnexpected keyword or identifier.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                 ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m218\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                         \u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m219\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1434: \u001b[0mUnexpected keyword or identifier.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                          ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m259\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                  \u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m283\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                          \u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m284\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1434: \u001b[0mUnexpected keyword or identifier.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                           ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m354\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                                                                                                 \u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m355\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1434: \u001b[0mUnexpected keyword or identifier.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                                                                                                  ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m446\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                                                                                                                                                                                             \u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m451\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                                                                                                                                                                                                  \u001b[0m\n","name":"/home/chatgpt/gpt-terminal-plus/tests/command.errorAnalysis.test.ts","startTime":1755557566821,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1755557566821,"message":"  ● Test suite failed to run\n\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m2\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m112\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'nrouter'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                               ~~~~~~~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m169\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                        ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m178\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                 ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m200\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'getFullSettings'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                       ~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m219\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                          ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m260\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                   ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m284\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                           ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m355\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                                                                                                  ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m447\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                                                                                                                                                                                              ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m452\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                                                                                                                                                                                                   ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m1\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m111\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                              \u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m168\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                       \u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m169\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1434: \u001b[0mUnexpected keyword or identifier.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                        ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m177\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                \u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m178\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1434: \u001b[0mUnexpected keyword or identifier.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                 ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m218\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                         \u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m219\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1434: \u001b[0mUnexpected keyword or identifier.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                          ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m259\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                  \u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m283\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                          \u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m284\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1434: \u001b[0mUnexpected keyword or identifier.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                           ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m354\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                                                                                                 \u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m355\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1434: \u001b[0mUnexpected keyword or identifier.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                                                                                                  ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m446\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                                                                                                                                                                                             \u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m451\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                                                                                                                                                                                                  \u001b[0m\n","name":"/home/chatgpt/gpt-terminal-plus/tests/chat.test.ts","startTime":1755557566821,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1755557566821,"message":"  ● Test suite failed to run\n\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m2\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m112\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'nrouter'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                               ~~~~~~~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m169\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                        ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m178\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                 ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m200\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'getFullSettings'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                       ~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m219\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                          ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m260\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                   ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m284\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                           ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m355\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                                                                                                  ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m447\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                                                                                                                                                                                              ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m452\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                                                                                                                                                                                                   ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m1\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m111\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                              \u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m168\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                       \u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m169\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1434: \u001b[0mUnexpected keyword or identifier.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                        ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m177\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                \u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m178\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1434: \u001b[0mUnexpected keyword or identifier.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                 ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m218\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                         \u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m219\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1434: \u001b[0mUnexpected keyword or identifier.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                          ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m259\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                  \u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m283\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                          \u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m284\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1434: \u001b[0mUnexpected keyword or identifier.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                           ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m354\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                                                                                                 \u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m355\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1434: \u001b[0mUnexpected keyword or identifier.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                                                                                                  ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m446\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                                                                                                                                                                                             \u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m451\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                                                                                                                                                                                                  \u001b[0m\n","name":"/home/chatgpt/gpt-terminal-plus/tests/chat.stream.test.ts","startTime":1755557566821,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1755557566821,"message":"  ● Test suite failed to run\n\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m2\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m112\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'nrouter'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                               ~~~~~~~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m169\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                        ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m178\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                 ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m200\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'getFullSettings'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                       ~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m219\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                          ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m260\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                   ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m284\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                           ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m355\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                                                                                                  ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m447\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                                                                                                                                                                                              ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m452\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                                                                                                                                                                                                   ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m1\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m111\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                              \u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m168\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                       \u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m169\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1434: \u001b[0mUnexpected keyword or identifier.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                        ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m177\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                \u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m178\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1434: \u001b[0mUnexpected keyword or identifier.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                 ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m218\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                         \u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m219\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1434: \u001b[0mUnexpected keyword or identifier.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                          ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m259\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                  \u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m283\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                          \u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m284\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1434: \u001b[0mUnexpected keyword or identifier.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                           ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m354\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                                                                                                 \u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m355\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1434: \u001b[0mUnexpected keyword or identifier.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                                                                                                  ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m446\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                                                                                                                                                                                             \u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m451\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                                                                                                                                                                                                  \u001b[0m\n","name":"/home/chatgpt/gpt-terminal-plus/tests/chat.stream.error.test.ts","startTime":1755557566821,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1755557566821,"message":"  ● Test suite failed to run\n\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m2\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m112\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'nrouter'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                               ~~~~~~~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m169\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                        ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m178\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                 ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m200\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'getFullSettings'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                       ~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m219\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                          ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m260\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                   ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m284\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                           ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m355\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                                                                                                  ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m447\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                                                                                                                                                                                              ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m452\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'n'.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                                                                                                                                                                                                   ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m1\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m111\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                              \u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m168\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                       \u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m169\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1434: \u001b[0mUnexpected keyword or identifier.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                        ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m177\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                \u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m178\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1434: \u001b[0mUnexpected keyword or identifier.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                 ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m218\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                         \u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m219\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1434: \u001b[0mUnexpected keyword or identifier.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                          ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m259\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                  \u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m283\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                          \u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m284\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1434: \u001b[0mUnexpected keyword or identifier.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                           ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m354\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                                                                                                 \u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m355\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1434: \u001b[0mUnexpected keyword or identifier.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                                                                                                  ~\u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m446\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                                                                                                                                                                                             \u001b[0m\n    \u001b[96msrc/routes/settingsRoutes.ts\u001b[0m:\u001b[93m28\u001b[0m:\u001b[93m451\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS1127: \u001b[0mInvalid character.\n\n    \u001b[7m28\u001b[0m \\n/**\\n * GET /settings/full\\n * Returns the entire runtime configuration with sensitive values redacted.\\n */\\nrouter.get(\"/full\", (_req: Request, res: Response) => {\\n  try {\\n    const settings = getFullSettings();\\n    res.status(200).json({ settings });\\n  } catch (err: any) {\\n    debug(\"Error generating full settings: %s\", err?.message ?? err);\\n    res.status(500).json({ error: \"internal_error\", message: err?.message ?? \"unknown\" });\\n  }\\n});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                                                                                                                                                                                                                                                                                                                                                                                  \u001b[0m\n","name":"/home/chatgpt/gpt-terminal-plus/tests/chat.providers.test.ts","startTime":1755557566821,"status":"failed","summary":""}],"wasInterrupted":false}
