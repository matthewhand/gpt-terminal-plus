# This Dockerfile uses a multi-stage build to create a production-ready image for the gpt-terminal-plus application.
# 
# Stage 1: Build
# - Sets up the build environment with Node.js, build-essential, Python, and pip.
# - Copies all application files and installs all dependencies.
# - Installs the TypeScript compiler.
# - Runs tests and linting to ensure code quality.
# - Compiles the TypeScript source code into JavaScript.
# 
# Stage 2: Production
# - Sets up the production environment with Node.js, Python, and pip.
# - Copies the compiled JavaScript files and package.json/package-lock.json from the build stage.
# - Installs only the production dependencies using npm ci.
# - Defines the command to run the application using the compiled JavaScript file.

# Stage 1: Build
FROM node:20 as build

WORKDIR /app

RUN apt-get update && apt-get upgrade -y && apt-get install -y \
    build-essential \
    python3 \
    python3-pip

COPY .. .
RUN npm install
RUN npm install -g typescript

# Generate test coverage report
RUN npm run test:coverage

# Run tests and linting
RUN npm run lint

# Compile TypeScript to JavaScript
RUN which tsc
RUN npm run build

# Stage 2: Production
FROM build as production

WORKDIR /app

# Include Python because it is as popular as TypeScript
RUN apt-get update && apt-get upgrade -y && apt-get install -y \
    python3 \
    python3-pip

# Copy compiled files and package.json/package-lock.json from build stage
RUN ls -latr /app/
RUN ls -latr /app/dist/
RUN ls -latr /app/dist/src/
COPY --from=build /app/dist /app/dist
COPY --from=build /app/package.json /app/package.json
COPY --from=build /app/package-lock.json /app/package-lock.json

# Install production dependencies
RUN npm ci --production

CMD ["node", "dist/src/index.js"]