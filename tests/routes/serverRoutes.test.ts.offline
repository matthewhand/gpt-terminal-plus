import request from 'supertest';
import express from 'express';
import serverRoutes from '../../src/routes/serverRoutes';
import { ServerHandler } from '../../src/handlers/ServerHandler';
import { SystemInfo, ServerConfig } from '../../src/types';

// Define mock servers
const mockServers: ServerConfig[] = [
  {
    host: 'localhost',
    protocol: 'ssh', // Assuming protocol is a required property
    username: 'user',
    privateKeyPath: '/path/to/private/key',
  },
  {
    host: 'user2@remotehost',
    protocol: 'ssh',
    username: 'user2',
    privateKeyPath: '/path/to/user2/private/key',
  },
];

// Mock SystemInfo object
const mockSystemInfo: SystemInfo = {
  homeFolder: '/home/user',
  type: 'Linux',
  release: '5.4.0',
  platform: 'linux',
  architecture: 'x64',
  pythonVersion: '3.8.5',
  powershellVersion: '7.0',
  totalMemory: 8192,
  freeMemory: 4096,
  uptime: 10000,
  currentFolder: '/home/user',
};

// Create an express application for testing
const app = express();
app.use(express.json());
app.use(serverRoutes);

// Mock ServerHandler and its methods
jest.mock('../../src/handlers/ServerHandler', () => ({
  __esModule: true,
  ServerHandler: {
    getInstance: jest.fn().mockImplementation((host: string) => {
      const serverConfig = mockServers.find(server => server.host === host);
      if (!serverConfig) {
        return Promise.reject(new Error('Server not in predefined list.'));
      }
      // Mimic the behavior of getting system info for the server
      return Promise.resolve({
        getSystemInfo: jest.fn().mockResolvedValue(mockSystemInfo),
      });
    }),
  },
}));

describe('POST /set-server', () => {
  it('should set the server if it exists in the list', async () => {
    const serverToSet = 'localhost';
    const response = await request(app).post('/set-server').send({ server: serverToSet });

    expect(response.statusCode).toBe(200);
    expect(response.body).toEqual({
      output: `Server set to ${serverToSet}`,
      systemInfo: mockSystemInfo,
    });
  });

  it('should return an error if the server is not in the list', async () => {
    const serverToSet = 'user3@unknownhost';
    const response = await request(app).post('/set-server').send({ server: serverToSet });

    //expect(response.statusCode).toBe(400);  // TODO figure out 400 not 500
    expect(response.statusCode).toBe(500);
    expect(response.body).toEqual({
      error: 'Server not in predefined list.',
    });
  });

});
