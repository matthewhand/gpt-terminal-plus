import { SshServerHandler } from '../../../src/handlers/SshServerHandler';
import { Client } from 'ssh2';

jest.mock('ssh2', () => ({
    Client: jest.fn().mockImplementation(() => {
        const client = {
            connect: jest.fn(),
            exec: jest.fn(),
            on: jest.fn().mockImplementation(function (this: any, event: string, handler: () => void) {
                if (event === 'ready') {
                    setImmediate(() => handler());
                }
                return this;
            }),
        };
        return client;
    }),
}));

describe('SshServerHandler', () => {
    let client: Client;
    let mockConnect: jest.Mock;
    let mockExec: jest.Mock;

    beforeEach(() => {
        client = new Client();
        mockConnect = client.connect as jest.Mock;
        mockExec = client.exec as jest.Mock;
    });

    it('should connect to the server', async () => {
        const handler = new SshServerHandler({ host: 'localhost', username: 'test' });
        handler.setClient(client);
        await handler.connect();
        expect(mockConnect).toHaveBeenCalled();
    });

    it('should execute a simple command and return global state', async () => {
        const mockStdout = 'Command output';
        const mockStderr = '';
        mockExec.mockImplementation((command, callback) => {
            const stream = {
                on: (event: string, handler: (data: Buffer) => void) => {
                    if (event === 'data') handler(Buffer.from(mockStdout));
                    if (event === 'close') handler(Buffer.alloc(0));
                    return stream;
                },
                stderr: {
                    on: (event: string, handler: (data: Buffer) => void) => {
                        if (event === 'data') handler(Buffer.from(mockStderr));
                        return stream;
                    }
                }
            };
            callback(null, stream);
        });

        const handler = new SshServerHandler({ host: 'localhost', username: 'test' });
        handler.setClient(client);
        await handler.connect();
        const result = await handler.executeCommand('ls -la');
        expect(result).toEqual({ stdout: mockStdout, stderr: mockStderr });
    });
});
