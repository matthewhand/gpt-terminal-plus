import { Client } from 'ssh2';
import SshServerHandler from '../../src/handlers/SshServerHandler';
import { ServerConfig } from '../../src/types';

// Mock SSH Client
jest.mock('ssh2', () => {
  class MockStream {
    on = jest.fn((event, callback) => {
      if (event === 'data') {
        process.nextTick(() => callback(Buffer.from('stdout response')));
      }
      return this;
    });
    stderr = {
      on: jest.fn((event, callback) => {
        if (event === 'data') {
          process.nextTick(() => callback(Buffer.from('stderr response')));
        }
        return this;
      })
    };
    end = jest.fn();
  }

  return {
    Client: jest.fn(() => ({
      on: jest.fn((event, handler) => {
        if (event === 'ready') process.nextTick(handler);
      }),
      connect: jest.fn(),
      exec: jest.fn((cmd, callback) => {
        process.nextTick(() => callback(null, new MockStream()));
      }),
      end: jest.fn(),
    })),
  };
});

describe('SshServerHandler', () => {
  const mockServerConfig: ServerConfig = {
    host: 'example.com',
    username: 'user',
    privateKeyPath: '/path/to/private/key',
  };

  it('executes commands and handles stdout and stderr', async () => {
    const handler = new SshServerHandler(mockServerConfig);
    const { stdout, stderr } = await handler.executeCommand('echo test');

    expect(stdout.trim()).toBe('stdout response');
    expect(stderr.trim()).toBe('stderr response');
  });
});
